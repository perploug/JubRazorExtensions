@model Umbraco.Cms.Web.Model.BackOffice.Editors.UserEditorModel
@using Umbraco.Cms.Web.Configuration.ApplicationSettings
@using Umbraco.Framework
@using Umbraco.Framework.Persistence.Model.Constants
@using Umbraco.Framework.Persistence.Model.Constants.Entities
@using Umbraco.Framework.Persistence.Model.Constants.Schemas
@using Umbraco.Framework.Security.Model.Entities
@{
    Layout = "../Shared/_TabbedEditorLayout.cshtml";
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

    //Change the action to post to depending on if the entity is new or not
    ViewBag.Action = !Model.Id.IsNullValueOrEmpty() ? "Edit" : "Create";
    //if the model is not null, then DONT post any Id to the Create method, otherwise post
    //the Id as per normal
    ViewBag.UrlParams = !Model.Id.IsNullValueOrEmpty()
        ? (object)new { id = Model.Id }
        : (object)new { id = "" };
}
@section Head {
    @{Html.RequiresJs("Umbraco.Editors/UserEditor.js", "Scripts");}
    <script type="text/javascript">
        (function ($) {
           $(document).ready(function () {                
                Umbraco.Editors.UserEditor.getInstance().init({
                    activeTabIndex: @Model.ActiveTabIndex ,
                    activeTabIndexField: $("#@Html.IdFor(x => Model.ActiveTabIndex)")
                }); 
            });
        })(jQuery);
    </script>
}
@section Tabs {
    <li><a href="#userPropertiesTab"><span>@(string.IsNullOrEmpty(Model.Name) ? "New User" : Model.Name)</span></a></li>
    <li><a href="#backofficePropertiesTab"><span>Backoffice</span></a></li>
    @{foreach (var t in Model.SortedTabs.DistinctBy(x => x.Alias).Where(x => x.Alias != FixedGroupDefinitions.UserDetailsAlias))
      {
        <li><a href="#t-@t.Id.ToString()"><span>@t.Name</span></a></li>
      }}
    <li><a href="#umbracoPropertiesTab"><span>Umbraco Properties</span></a></li>
}
@using (Html.BeginForm((string)ViewBag.Action, new Guid(CorePluginConstants.UserEditorControllerId), (object)ViewBag.UrlParams, new { enctype = "multipart/form-data" }))
{
    @Html.UmbValidationSummary("Please correct the errors and try again.")
    
    @Html.UmbEditorBar();
 
    @Html.HiddenFor(x => Model.ActiveTabIndex)
    
    if (!Model.Id.IsNullValueOrEmpty())
    {
        @Html.HiddenFor(x => Model.Id)
    }   
    
    <div id="editorContent" class="has-editor-bar scrolling-content padded-content">
        
        @if (Model.Id.IsNullValueOrEmpty())
        {
            <p class="notice">@("User.UnSaved.Message".Localize())</p>
        }
        
        @*Render User properties tab*@
        <div id="userPropertiesTab">
            <div class="property-pane clearfix">
                @Html.UmbEditorFor(x => Model.Name)
                @Html.UmbEditorFor(x => Model.Username, Html.TextBoxFor(y => Model.Username, Model.ProviderUserKey != null ? new { disabled = "disabled", @readonly = "readonly" } : null))
                @Html.UmbEditorFor(x => Model.Password, Html.PasswordFor(x => Model.Password, new { autocomplete = "off" }))
                @Html.UmbEditorFor(x => Model.ConfirmPassword, Html.PasswordFor(x => Model.ConfirmPassword, new { autocomplete = "off" }))
                @Html.UmbEditorFor(x => Model.Email)
                <div class="property-editor clearfix">
                    <div class="property-editor-label">User Groups</div>
                    <div class="property-editor-control">
                        <div class="table-box list-picker checkboxlist">
                            <table class="standard highlight-row">
                                <tbody>
                                @foreach (UserGroup userGroup in ViewBag.AvailableUserGroups)
                                {
                                    <tr>
                                        <td class="check-box-cell">
                                            <input 
                                                type="checkbox"
                                                id="@userGroup.Id.GetHtmlId()" 
                                                name="@Html.NameFor(x => Model.Groups)" 
                                                value="@userGroup.Id"
                                                @(Model.Groups != null && Model.Groups.Contains(userGroup.Id) ? "checked='checked'" : "") />
                                        </td>
                                        <td>
                                            <label for="@userGroup.Id.GetHtmlId()">@userGroup.Name</label>
                                        </td>
                                    </tr> 
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div id="persistanceSettings" class="property-pane clearfix">
                @Html.UmbEditorFor(x => Model.IsApproved)
                @Html.UmbEditorFor(
                    x => Model.SessionTimeout,
                    x => Model.SessionTimeout,
                    @<text>@Html.TextBoxFor(x => Model.SessionTimeout, new { @Value = Model.SessionTimeout == null || Model.SessionTimeout == 0 ? 60 : Model.SessionTimeout })</text>)
            </div>
         </div>

        <div id="backofficePropertiesTab">
            <div class="property-pane clearfix">
                <div class="property-editor clearfix">
                    <div class="property-editor-label">Start Node in Content</div>
                    <div class="property-editor-control">
                       @Html.TreePickerFor(x => Model.StartContentHiveId, new TreePickerRenderModel
                       {
                           TreeControllerId = new Guid(CorePluginConstants.ContentTreeControllerId),
                           TreeVirtualRootId = FixedHiveIds.ContentVirtualRoot,
                           StartNodeId = new HiveId(new Guid(CorePluginConstants.ContentTreeControllerId))
                       })
                    </div>
                </div>
                <div class="property-editor clearfix">
                    <div class="property-editor-label">Start Node in Media</div>
                    <div class="property-editor-control">
                       @Html.TreePickerFor(x => Model.StartMediaHiveId, new TreePickerRenderModel
                       {
                           TreeControllerId = new Guid(CorePluginConstants.MediaTreeControllerId),
                           TreeVirtualRootId = FixedHiveIds.MediaVirtualRoot,
                           StartNodeId = new HiveId(new Guid(CorePluginConstants.MediaTreeControllerId))
                       })
                    </div>
                </div>
            </div>
            <div id="persistanceSettings" class="property-pane clearfix">
                <div class="property-editor clearfix">
                    <div class="property-editor-label">Sections</div>
                    <div class="property-editor-control">
                        <div class="table-box list-picker checkboxlist">
                            <table class="standard highlight-row">
                                <tbody>
                                @foreach (IApplication application in ViewBag.AvailableApplications)
                                {
                                    <tr>
                                        <td class="check-box-cell">
                                            <input 
                                                type="checkbox"
                                                id="@application.Alias" 
                                                name="@Html.NameFor(x => Model.Applications)" 
                                                value="@application.Alias"
                                                @(Model.Applications != null && Model.Applications.Contains(application.Alias) ? "checked='checked'" : "") />
                                        </td>
                                        <td>
                                            <label for="@application.Alias">@application.Name</label>
                                        </td>
                                    </tr> 
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        @{foreach (var t in Model.SortedTabs.DistinctBy(x => x.Alias).Where(x => x.Alias != FixedGroupDefinitions.UserDetailsAlias))
          {
            <div>
                @* render editor for the current property for the current tab *@
                
                @{
                    var contentProperties = Model.Properties.Where(x => x.TabAlias == t.Alias).ToArray();

                    foreach (var p in contentProperties.OrderBy(x => x.SortOrder).ThenBy(x => x.DocTypeProperty.SchemaName))
                    {
                        @Html.EditorFor(editor => p, "ContentProperty", p.Id.GetHtmlId())
                    }
                }
            </div>
          }
        }

        @*Render Umbraco properties tab*@
        <div id="umbracoPropertiesTab">
            <div class="property-pane clearfix">
                @Html.UmbDisplayFor(f => Model.Id)
                @Html.UmbDisplayFor(f => Model.ProviderUserKey)
                @Html.UmbDisplayFor(f => Model.ProfileId)
                @Html.UmbDisplayFor(m => Model.DocumentTypeName)
                @Html.UmbDisplayFor(f => Model.UtcCreated)
                @Html.UmbDisplayFor(f => Model.UtcModified)
                @Html.UmbDisplayFor(f => Model.CreatedBy)
                @Html.UmbDisplayFor(f => Model.UpdatedBy)
            </div>
            <div class="property-pane clearfix">
                @Html.UmbDisplayFor(f => Model.LastActivityDate)
                @Html.UmbDisplayFor(f => Model.LastLoginDate)
                @Html.UmbDisplayFor(f => Model.LastPasswordChangeDate)
            </div>
        </div>
    </div>
}