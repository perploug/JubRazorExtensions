<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Umbraco.Framework</name>
    </assembly>
    <members>
        <member name="T:Umbraco.Framework.AbstractApplicationCache">
            <summary>
            A cache provider used for caching data in the current application which persists across scope changes.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.DisposableObject">
            <summary>
            Abstract implementation of logic commonly required to safely handle disposable unmanaged resources.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.DisposableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.DisposableObject.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Umbraco.Framework.AbstractApplicationCache.GetOrCreate``1(System.String,System.Func{Umbraco.Framework.HttpRuntimeCacheParameters{``0}})">
            <summary>
            Gets or Creates the cache item
            </summary>
            <param name="key"></param>
            <param name="callback">Callback to create the cache item if it doesn't exist</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.AbstractApplicationCache.InvalidateItems(System.String)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="pattern"></param>
            <returns>Returns the number of items removed that matched the pattern</returns>
        </member>
        <member name="T:Umbraco.Framework.AbstractEquatableObject`1">
            <summary>
            Objects implementing <see cref="T:Umbraco.Framework.AbstractEquatableObject`1"/> are provided with common functionality for establishing domain-specific equality
            and a robust implementation of GetHashCode
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Framework.AbstractEquatableObject`1.GetNativeType">
            <summary>
            Returns the real type in case the <see cref="M:System.Object.GetType"/> method has been proxied.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.AbstractEquatableObject`1.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
        </member>
        <member name="M:Umbraco.Framework.AbstractEquatableObject`1.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to this instance.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Umbraco.Framework.AbstractEquatableObject`1.op_Equality(Umbraco.Framework.AbstractEquatableObject{`0},Umbraco.Framework.AbstractEquatableObject{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.AbstractEquatableObject`1.op_Inequality(Umbraco.Framework.AbstractEquatableObject{`0},Umbraco.Framework.AbstractEquatableObject{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="F:Umbraco.Framework.AbstractEquatableObject`1.EqualityComparisonMemberCache">
            <summary>
            A static <see cref="!:ConcurrentDictionary&lt;Type, IEnumerable&lt;PropertyInfo&gt;&gt;"/> cache of natural ids for types which may implement this abstract class.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.AbstractEquatableObject`1.GetMembersForEqualityComparison">
            <summary>
            Gets the natural id members.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.AbstractEquatableObject`1.EnsureEqualityComparisonMembersCached">
            <summary>
            Ensures the natural id members are cached in the static <see cref="F:Umbraco.Framework.AbstractEquatableObject`1.EqualityComparisonMemberCache"/>.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.AbstractEquatableObject`1.CompareCustomEqualityMembers(Umbraco.Framework.AbstractEquatableObject{`0})">
            <summary>
            Establishes if the natural id of this instance matches that of <paramref name="compareWith"/>
            </summary>
            <param name="compareWith">The instance with which to compare.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.ActivatorHelper">
            <summary>
            Helper methods for Activation
            </summary>
        </member>
        <member name="M:Umbraco.Framework.ActivatorHelper.CreateInstance``1">
            <summary>
            Creates an instance of a type using that type's default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.Caching.AbstractCacheProvider">
            <summary>
            A cache provider used for caching data in the current scope. For example, in a web application the current scope is the current request.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Caching.DictionaryCacheProvider.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Caching.PerHttpRequestCacheProvider.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Caching.RuntimeCacheProvider.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.CancellableEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the action raising this event should be cancelled.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Umbraco.Framework.CloneOf`1">
            <summary>
            Represents a clone of another object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Framework.CloneOf`1.op_Implicit(Umbraco.Framework.CloneOf{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Umbraco.Framework.CloneOf`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="other">The original item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Umbraco.Framework.CloneOf`1.PartialTrustCausedPartialClone">
            <summary>
            Gets or sets a value indicating whether full cloning was not possible due to partial trust restricting access to private members.
            </summary>
            <value>
            	<c>true</c> if partial trust caused a partial clone; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Framework.CloneOf`1.Value">
            <summary>
            Gets the cloned value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Umbraco.Framework.ConfigurationElementExtensions.OnlyLocalConfig``1(System.Configuration.ConfigurationElementCollection)">
            <summary>
            Used for DeepConfigManager sections to ensure that only sections are returned that belong
            to the config file found and does not include 'inherited' sections from the application declared
            web.config.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.ConfigurationHelper.GetTypeFromTypeConfigName(System.String)">
            <summary>
            Gets the type from the type string.
            </summary>
            <param name="typeConfigName">Name of the type.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Configuration.ConfigurationHelper.LoadType(System.String,System.String)">
            <summary>
            Loads a type either from the existing AppDomain or from the supplied assembly name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.Configuration.DeepConfigManager">
            <summary>
            A helper class for returning configuration values by first checking with configuration stored in a subfolder, typically a plugins folder,
            and then falling back to the primary application config.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.#ctor(System.Web.HttpContextBase)">
            <summary>
             Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.GetConnectionStrings(System.String)">
            <summary>
             Returns a collection of all connection strings
            </summary>
            <param name="pluginBasePath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.GetFirstWebSetting``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Gets the first configuration setting matching <paramref name="sectionName"/> by calling <see cref="!:GetWebSettings&lt;TSection,TOut&gt;(string,Func&lt;TSection,TOut&gt;,string,string,string)"/>.
            See that method for an example. The relative plugin base path in <paramref name="pluginBasePath"/> is mapped to a physical path using the <see cref="T:System.Web.HttpContextWrapper"/> supplied to this instance
            in the constructor.
            </summary>
            <typeparam name="TSection">The type of the section.</typeparam>
            <typeparam name="TOut">The type outputted by the expression in <paramref name="deferred"/>.</typeparam>
            <param name="sectionName">Name of the section in the configuration files.</param>
            <param name="deferred">The deffered expression.</param>
            <param name="pluginBasePath">The relative plugin root path.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.CreateNewConfigFile(System.IO.FileInfo,System.Boolean)">
            <summary>
            Creates a new config file at the specified file path with the basics - appSettings and connectionStrings
            </summary>
            <param name="toCreate"></param>
            <param name="overwriteIfExists"></param>
            <returns></returns>
            <remarks>
            It would be way more awesome to use 'real' configuration but Medium trust is not our friend in this circumstance
            </remarks> 
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.SerializeProviderConfigSection(System.Xml.Linq.XDocument,System.Configuration.ConfigurationElement,System.String,System.Boolean)">
            <summary>
            Serializes the provider config section and returns the XElement to which the operation was performed.
            </summary>
            <param name="config">The config.</param>
            <param name="section">The section.</param>
            <param name="sectionPath">The section path.</param>
            <param name="writeSectionDeclaration">if set to <c>true</c> [write section declaration].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.GetWebSettings``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Gets all the configuration settings matching <paramref name="sectionName"/> by calling <see cref="!:GetWebSettings&lt;TSection,TOut&gt;(string,Func&lt;TSection,TOut&gt;,string,string,string)"/>.
            See that method for an example.
            </summary>
            <typeparam name="TSection">The type of the section.</typeparam>
            <typeparam name="TOut">The type outputted by the expression in <paramref name="deferred"/>.</typeparam>
            <param name="sectionName">Name of the section in the configuration files.</param>
            <param name="deferred">The deffered expression.</param>
            <param name="pluginBasePath">The relative plugin root path.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.GetSingleWebAppSetting``1(System.String,System.String)">
            <summary>
            Gets the first discoverable value from the 'appSettings' section of configuration, by calling <see cref="M:Umbraco.Framework.Configuration.DeepConfigManager.GetWebAppSettings``1(System.String,System.String)"/>.
            </summary>
            <typeparam name="TOut">The type of the value returned.</typeparam>
            <param name="key">The key of the setting.</param>
            <param name="pluginBasePath">The relative plugin root path.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.GetWebAppSettings``1(System.String,System.String)">
            <summary>
            Gets all discoverable values from the 'appSettings' section of configuration, by first searching for all consumable configuration files contained in
            <paramref name="pluginBasePath"/>, having mapped it to a physical path using the <see cref="T:System.Web.HttpContextWrapper"/> supplied to this instance
            in the constructor.
            </summary>
            <typeparam name="TOut">The type of the value returned.</typeparam>
            <param name="key">The key of the setting.</param>
            <param name="pluginBasePath">The relative plugin root path.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.GetWebAppSettings``1(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a value from the 'appSettings' section of configuration, by first searching for all consumable configuration files contained in
            <paramref name="absolutePluginRoot"/>.
            </summary>
            <typeparam name="TOut">The type of the value returned.</typeparam>
            <param name="key">The key of the setting.</param>
            <param name="applicationRoot">The application root path.</param>
            <param name="absolutePluginRoot">The absolute plugin root path.</param>
            <param name="pluginBasePath">The relative plugin root path.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.GetWebSettings``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.String)">
            <summary>
            Gets all the configuration settings matching <paramref name="sectionName"/> by first searching for all consumable configuration files contained in
            <paramref name="absolutePluginRoot"/>. For every configuration found which has a matching section name, yields back the output specified in the provided
            delegate <paramref name="deferred"/>.
            </summary>
            <example>
            If you have a custom <see cref="T:System.Configuration.ConfigurationSection"/> called <see cref="!:FoundationConfigurationSection"/>, you can ask for a specific setting like so:
            <code>
            var myValue = DeepConfigManager.Default.GetFirstWebSetting&lt;FoundationConfigurationSection, string&gt;("umbraco.foundation", x =&gt; x.FoundationSettings.ApplicationTierAlias, "~/App_Plugins");
            </code>
            This will first scan the ~/App_Plugins folder recursively to find configuraiton settings called 'umbraco.foundation' that are readable as <see cref="!:FoundationConfigurationSection"/>,
            and for all those it finds (including the main app config) it will invoke the delegate provided in <paramref name="deferred"/>.
            </example>
            <typeparam name="TSection">The type of the section.</typeparam>
            <typeparam name="TOut">The type outputted by the expression in <paramref name="deferred"/>.</typeparam>
            <param name="sectionName">Name of the section in the configuration files.</param>
            <param name="deferred">The deffered expression.</param>
            <param name="applicationRoot">The application root path.</param>
            <param name="absolutePluginRoot">The absolute plugin root path.</param>
            <param name="pluginBasePath">The relative plugin root path.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.IsRootConfig(System.String,System.String,System.String)">
            <summary>
            Checks if the 
            </summary>
            <param name="searchPath"></param>
            <param name="sourceDirectory"></param>
            <param name="applicationRoot"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Configuration.DeepConfigManager.GetSearchPaths(System.String,System.String)">
            <summary>
            Gets the search paths. Both the relative and the absolute (mapped) plugin roots are required in order to iterate the file system whilst returning a relative path.
            </summary>
            <remarks>The reason why the params are not "absolute root" and "relative plugin path", for combination in side this method, is in case the plugin path is a virtual directory
            that IIS maps to a different physical location via Server.MapPath.</remarks>
            <param name="relativePluginRoot">The relative plugin root.</param>
            <param name="absolutePluginRoot">The absolute plugin root.</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Configuration.DeepConfigManager.Default">
            <summary>
            Gets an instance of the <see cref="T:Umbraco.Framework.Configuration.DeepConfigManager"/> using the current HttpContext.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Configuration.PluginManagerConfiguration">
            <summary>
            Configuration 
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Configuration.PluginManagerConfiguration.PluginManagerXmlKey">
            <summary>
            The Pluginmanager xml configuration key
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Configuration.PluginManagerConfiguration.GetSettings">
            <summary>
            Gets the settings.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Configuration.PluginManagerConfiguration.PluginsPath">
            <summary>
            Gets or sets the plugins path.
            </summary>
            <value>
            The plugins path.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Configuration.PluginManagerConfiguration.ShadowCopyPath">
            <summary>
            Gets or sets the shadow copy path.
            </summary>
            <value>
            The shadow copy path.
            </value>
        </member>
        <member name="T:Umbraco.Framework.Context.DefaultFrameworkContext">
            <summary>
            The default implementation of <see cref="T:Umbraco.Framework.Context.IFrameworkContext"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Context.IFrameworkContext">
            <summary>
            An aggregatation of common Framework services and components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Context.IFrameworkContext.TaskManager">
            <summary>
            Gets the task manager
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Context.IFrameworkContext.CurrentLanguage">
            <summary>
            Gets or sets the current language used for localization.
            </summary>
            <value>
            The current language.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Context.IFrameworkContext.TextManager">
            <summary>
            Gets the text manager to be used for localization
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Context.IFrameworkContext.TypeMappers">
            <summary>
            Gets a collection of registered type mappers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Context.IFrameworkContext.ScopedFinalizer">
            <summary>
            Gets a scoped finalizer queue.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Context.IFrameworkContext.ScopedCache">
            <summary>
            Gets a scoped cache bag
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Context.IFrameworkContext.ApplicationCache">
            <summary>
            Gets the application cache bag
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Context.DefaultFrameworkContext.#ctor(Umbraco.Framework.Localization.TextManager,Umbraco.Framework.TypeMapping.MappingEngineCollection,Umbraco.Framework.AbstractScopedCache,Umbraco.Framework.AbstractApplicationCache,Umbraco.Framework.AbstractFinalizer,Umbraco.Framework.Tasks.ApplicationTaskManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Context.DefaultFrameworkContext"/> class.
            </summary>
            <param name="textManager">The text manager.</param>
            <param name="typeMappers">The type mappers.</param>
            <param name="scopedCache">The scoped cache.</param>
            <param name="applicationCache">The application cache</param>
            <param name="finalizer"></param>
            <param name="taskMgr"></param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Context.DefaultFrameworkContext.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Context.DefaultFrameworkContext.TaskManager">
            <summary>
            Gets the task manager
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Context.DefaultFrameworkContext.CurrentLanguage">
            <summary>
            Gets or sets the current language used for localization.
            </summary>
            <value>The current language.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Context.DefaultFrameworkContext.TextManager">
            <summary>
            Gets the text manager to be used for localization
            </summary>
            <value>The text manager.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Context.DefaultFrameworkContext.TypeMappers">
            <summary>
            Gets a collection of registered type mappers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Context.DefaultFrameworkContext.ScopedFinalizer">
            <summary>
            Gets a scoped finalizer queue.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Context.DefaultFrameworkContext.ScopedCache">
            <summary>
            Gets the scoped cache bag
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Context.DefaultFrameworkContext.ApplicationCache">
            <summary>
            Gets the application cache bag
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Context.IRequiresFrameworkContext">
            <summary>
            Denotes that a component requires a <see cref="T:Umbraco.Framework.Context.IFrameworkContext"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Context.IRequiresFrameworkContext.FrameworkContext">
            <summary>
            Gets the framework context.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.AbstractScopedCache">
            <summary>
            A cache provider used for caching data in the current scope. For example, in a web application the current scope is the current request.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.AbstractScopedCache.InvalidateItems(System.String)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="pattern"></param>
            <returns>Returns the number of items removed that matched the pattern</returns>
        </member>
        <member name="T:Umbraco.Framework.CustomBooleanTypeConverter">
            <summary>
            Allows for converting string representations of 0 and 1 to boolean
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Data.DataSerializationTypes">
            <summary>Values that represent data types to which values should be serialized. </summary>
            <remarks>Doc updated, 14-Jan-2011.</remarks>
        </member>
        <member name="T:Umbraco.Framework.Data.ITracksConcurrency">
            <summary>
              Defines a concurrency token for tracking object changes between tiers
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Data.ITracksConcurrency.ConcurrencyToken">
            <summary>
            Gets the concurrency token.
            </summary>
            <value>The concurrency token.</value>
        </member>
        <member name="T:Umbraco.Framework.DeepConfigManagerExtensions">
            <summary>
            Extensions for <see cref="T:Umbraco.Framework.Configuration.DeepConfigManager"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.DeepConfigManagerExtensions.GetFirstPluginSetting``2(Umbraco.Framework.Configuration.DeepConfigManager,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the first configuration setting matching <paramref name="sectionName"/> by calling <see cref="!:DeepConfigManager.GetWebSettings&lt;TSection,TOut&gt;(string,Func&lt;TSection,TOut&gt;,string,string,string)"/>.
            See that method for an example. The relative plugin base path in <see cref="P:Umbraco.Framework.Configuration.PluginManagerConfiguration.PluginsPath"/> is mapped to a physical path using the <see cref="T:System.Web.HttpContextWrapper"/> supplied to this instance
            <paramref name="manager"/> in its constructor.
            </summary>
            <typeparam name="TSection">The type of the section.</typeparam>
            <typeparam name="TOut">The type outputted by the expression in <paramref name="deferred"/>.</typeparam>
            <param name="manager">The manager.</param>
            <param name="sectionName">Name of the section in the configuration files.</param>
            <param name="deferred">The deffered expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DeepConfigManagerExtensions.GetFirstPluginSection``1(Umbraco.Framework.Configuration.DeepConfigManager,System.String)">
            <summary>
            Gets the first plugin section.
            </summary>
            <typeparam name="TSection">The type of the section.</typeparam>
            <param name="manager">The manager.</param>
            <param name="sectionName">Name of the section.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DeepConfigManagerExtensions.GetPluginSettings``2(Umbraco.Framework.Configuration.DeepConfigManager,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the plugin settings.
            </summary>
            <typeparam name="TSection">The type of the section.</typeparam>
            <typeparam name="TOut">The type of the out.</typeparam>
            <param name="manager">The manager.</param>
            <param name="sectionName">Name of the section.</param>
            <param name="deferred">The deferred.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DeepConfigManagerExtensions.GetConnectionStrings(Umbraco.Framework.Configuration.DeepConfigManager)">
            <summary>
            Returns a collection of all connection string registered via deep config
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DeferredEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param><param name="y">The second object of type <paramref name="T"/> to compare.</param>
        </member>
        <member name="M:Umbraco.Framework.DeferredEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Umbraco.Framework.DependencyManagement.IDependencyDemandBuilder">
            <summary>Interface for dependency demand builders. Specific implementations act like 'modules' declaring their type dependencies with a container.</summary>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyDemandBuilder.Build(Umbraco.Framework.DependencyManagement.IContainerBuilder,Umbraco.Framework.DependencyManagement.IBuilderContext)">
            <summary>Builds the dependency demands required by this implementation. </summary>
            <param name="containerBuilder">The <see cref="T:Umbraco.Framework.DependencyManagement.IContainerBuilder"/> .</param>
            <param name="context">The context for this building session containing configuration etc.</param>
        </member>
        <member name="T:Umbraco.Framework.DependencyManagement.IDependencyResolver">
            <summary>Interface for dependency resolving. In specific implementations, allows for the resolution of types by a chosen IoC container.</summary>
            <remarks>Doc updated, 14-Jan-2011.</remarks>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.Resolve``1">
            <summary>Resolves a service given the required contract type.</summary>
            <typeparam name="T">The type with which the service implementation was registered.</typeparam>
            <returns>An instance of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.ResolveAll``1">
            <summary>
            Resolves all services given the required contract type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of instances of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.Resolve``1(System.String)">
            <summary>Resolves a service given the required contract type, and the required name.</summary>
            <typeparam name="T">The type with which the service implementation was registered.</typeparam>
            <param name="name">The name of the service to resolve.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.Resolve(System.Type)">
            <summary>Resolves a service given the required contract type.</summary>
            <param name="type">The type with which the service implementation was registered.</param>
            <returns>An instance of type <paramref name="type"/>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.ResolveAll(System.Type)">
            <summary>
            Resolves all services given the required contract type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of instances of type <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.Resolve(System.Type,System.String)">
            <summary>Resolves a service given the required contract type, and the required name.</summary>
            <param name="type">The type with which the service implementation was registered.</param>
            <param name="name">The name of the service to resolve.</param>
            <returns>An instance of type <paramref name="type"/>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.TryResolve``1">
            <summary>
            Attempts to resolve a type, failing silently if the resolution cannot be performed.
            </summary>
            <remarks>The <typeparamref name="T"/> type parameter must be a reference (class) object in order to assess null resolutions predictably.</remarks>
            <typeparam name="T">The type to resolve.</typeparam>
            <returns>A tuple indicating success and the resolved value, if any.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.TryResolve``1(System.String)">
            <summary>
            Attempts to resolve a type, failing silently if the resolution cannot be performed.
            </summary>
            <remarks>The <typeparamref name="T"/> type parameter must be a reference (class) object in order to assess null resolutions predictably.</remarks>
            <param name="name">The name of the service to resolve.</param>
            <typeparam name="T">The type to resolve.</typeparam>
            <returns>A tuple indicating success and the resolved value, if any.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.TryResolve(System.Type)">
            <summary>
            Attempts to resolve a type, failing silently if the resolution cannot be performed.
            </summary>
            <remarks>The <paramref name="type"/> parameter must be a reference (class) object in order to assess null resolutions predictably.</remarks>
            <param name="type">The type to resolve.</param>
            <returns>A tuple indicating success and the resolved value, if any.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IDependencyResolver.TryResolve(System.Type,System.String)">
            <summary>
            Attempts to resolve a type, failing silently if the resolution cannot be performed.
            </summary>
            <remarks>The <paramref name="type"/> parameter must be a reference (class) object in order to assess null resolutions predictably.</remarks>
            <param name="name">The name of the service to resolve.</param>
            <param name="type">The type to resolve.</param>
            <returns>A tuple indicating success and the resolved value, if any.</returns>
        </member>
        <member name="T:Umbraco.Framework.Diagnostics.AbstractCounterManager`1">
            <summary>
            Abstract implementation of a manager which maintains <see cref="T:System.Diagnostics.PerformanceCounter"/> objects by using a key of type <typeparamref name="TEnum"/>.
            In explicit implementations, <typeparamref name="TEnum"/> is typically of type <see cref="T:System.Enum"/> but can be any struct implementing <see cref="T:System.IComparable"/>.
            </summary>
            <typeparam name="TEnum">The type used as a key internally to track <see cref="T:System.Diagnostics.PerformanceCounter"/> instances.</typeparam>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.GenerateCounterNames">
            <summary>
            When implemented in a derived class, generates the set of counters which this manager should ensure are avaible in WMI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.EnsureInitialised">
            <summary>
            If <see cref="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.IsInitialised"/> is false, calls <see cref="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.GenerateCounterNames"/>, followed by <see cref="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.EnsureCountersExist"/>, and sets <see cref="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.IsInitialised"/> to true.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.GetDurationCounter(`0,`0)">
            <summary>
            Gets or creates an <see cref="T:Umbraco.Framework.Diagnostics.AverageDurationCounter"/>.
            </summary>
            <remarks>
            For tracking the average duration of an iteration, .NET's implementation of WMI performance counters requires two physical counters, one for
            the incrementing elapsed time and one for the incrementing number of iterations over which the time has been spent. This method acts as a wrapper
            for easier access to this functionality.
            </remarks>
            <param name="durationType">The key used to find the duration counter.</param>
            <param name="iterationType">The key used to find the iteration counter.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.GetWriteableCounter(`0)">
            <summary>
            Gets or creates a writeable <see cref="T:System.Diagnostics.PerformanceCounter"/>.
            </summary>
            <param name="type">The key used to find the counter descriptor.</param>
            <remarks>If <see cref="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.CountersAvailable"/> is anything other than <code>CounterAvailability.Available</code>, this method returns without operation.</remarks>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.Increment(`0)">
            <summary>
            Increments the specified counter by one.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.IncrementDuration(`0,`0,System.Int64)">
            <summary>
            Increments the specified average duration counter by the <paramref name="ticks"/> provided.
            </summary>
            <param name="durationType">The key used to find the duration counter.</param>
            <param name="iterationType">The key used to find the iteration counter.</param>
            <param name="ticks">The time over which the previous iteration elapsed, in system clock ticks.</param>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.IncrementDuration(`0,`0,System.Diagnostics.Stopwatch)">
            <summary>
            Increments the specified average duration counter by obtaining the elapsed ticks from the <paramref name="stopwatch"/> provided.
            </summary>
            <param name="durationType">Type of the duration.</param>
            <param name="iterationType">Type of the iteration.</param>
            <param name="stopwatch">The stopwatch.</param>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.EnsureCountersExist">
            <summary>
            If an attempt has not already been made according to <see cref="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.CountersAvailable"/>, tries to ensure that the relevant performance counters exist in WMI.
            </summary>
            <returns>A <see cref="T:Umbraco.Framework.Diagnostics.CounterAvailability"/> indicating the success of the operation.</returns>
            <remarks>This method will update <see cref="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.CountersAvailable"/> with the result.</remarks>
        </member>
        <member name="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.InstanceName">
            <summary>
            Gets or sets the name of the performance counter instance which this manager represents.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.CategoryName">
            <summary>
            Gets or sets the name of the performance counter category which this manager represents.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.CategoryHelp">
            <summary>
            Gets or sets the category help.
            </summary>
            <value>The category help.</value>
        </member>
        <member name="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.CountersAvailable">
            <summary>
            An enumeration of type <see cref="T:Umbraco.Framework.Diagnostics.CounterAvailability"/> indicating the availability of counters for writing.
            The value of this property is set by <see cref="M:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.EnsureCountersExist"/>.
            </summary>
            <value>The counters available.</value>
        </member>
        <member name="P:Umbraco.Framework.Diagnostics.AbstractCounterManager`1.IsInitialised">
            <summary>
            Gets or sets a value indicating whether this instance is initialised.
            </summary>
            <value>
            	<c>true</c> if this instance is initialised; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Umbraco.Framework.Diagnostics.AverageDurationCounter">
            <summary>
            Represents a pair of <see cref="T:System.Diagnostics.PerformanceCounter"/> instances which are used to track average duration between iterations.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.AverageDurationCounter.IncrementBy(System.Int64)">
            <summary>
            Increments the duration counter by the number of ticks provided, and increments the iteration counter by one.
            </summary>
            <param name="ticks">The ticks.</param>
        </member>
        <member name="T:Umbraco.Framework.Diagnostics.CounterAvailability">
            <summary>
            Enumeration depicting the availability of counters for write operations.
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Diagnostics.CounterAvailability.Unknown">
            <summary>
            Availability has not yet been determined
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Diagnostics.CounterAvailability.NoneDueToPermissions">
            <summary>
            Counters are not writable due to insufficient permissions
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Diagnostics.CounterAvailability.NoneDueToError">
            <summary>
            Counters are not writable due to a general error
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Diagnostics.CounterAvailability.Available">
            <summary>
            Counters are available for writing
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Diagnostics.CounterDescriptor">
            <summary>
            Describes a performance counter's name, help text and type (<see cref="T:System.Diagnostics.PerformanceCounterType"/>). This is used within an <see cref="T:Umbraco.Framework.Diagnostics.AbstractCounterManager`1"/> implementation to 
            specify the required performance counters.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Diagnostics.CounterDescriptor.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Umbraco.Framework.Diagnostics.CounterDescriptor.Help">
            <summary>
            Gets or sets the help.
            </summary>
            <value>The help.</value>
        </member>
        <member name="P:Umbraco.Framework.Diagnostics.CounterDescriptor.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Umbraco.Framework.Diagnostics.LogHelper">
            <summary>
             Used for logging
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.LogHelper.LoggerFor``1">
            <summary>
             Returns a logger for the type specified
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.LogHelper.LoggerFor(System.Object)">
            <summary>
            Returns a logger for the object's type
            </summary>
            <param name="getTypeFromInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.LogHelper.Error``1(System.String,System.Exception)">
            <summary>
            Adds an error log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.LogHelper.TraceIfEnabled``1(System.String,System.Func{System.Object}[])">
            <summary>
            Traces a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessageFormat">The generate message format.</param>
            <param name="formatItems">The format items.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.LogHelper.TraceIfEnabled``1(System.Func{System.String})">
            <summary>
            Traces a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessage">The delegate to generate a message.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.LogHelper.Warn``1(System.String)">
            <summary>
            Adds a warn log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.LogHelper.Warn``1(System.String,System.Object[])">
            <summary>
            Adds a warn log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="format"></param>
            <param name="items"></param>
        </member>
        <member name="M:Umbraco.Framework.Diagnostics.LogHelper.TraceIfEnabled(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Traces if tracing is enabled.
            </summary>
            <param name="type">The type for the logging namespace.</param>
            <param name="generateMessageFormat">The message format.</param>
            <param name="formatItems">The format items.</param>
        </member>
        <member name="T:Umbraco.Framework.DictionaryExtensions">
            <summary>
             Extension methods for dictionary
            </summary>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.ToLazyConcurrentDictionary``3(System.Collections.Generic.IDictionary{``0,``2},System.Func{``2,``1})">
            <summary>
            Converts a normal dictionary to a LazyConcurrentDictionary
            </summary>
            <typeparam name="TKey">the key type</typeparam>
            <typeparam name="TVal">the new value type</typeparam>
            <typeparam name="TOldVal">The old value type</typeparam>
            <param name="d"></param>
            <param name="converter">The converter to conver from the old val type to the new val type</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.ToLazyDictionary``3(System.Collections.Generic.IDictionary{``0,``2},System.Func{``2,``1})">
            <summary>
            Converts a normal dictionary to a LazyDictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
            <typeparam name="TOldVal"></typeparam>
            <param name="d"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary)">
            <summary>
            Converts a dictionary to another type by only using direct casting
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary,System.Func{System.Object,``0},System.Func{System.Object,``1})">
            <summary>
            Converts a dictionary to another type using the specified converters
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <param name="keyConverter"></param>
            <param name="valConverter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a dictionary to a NameValueCollection
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.GetOrAddWithLock``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Gets a value, or creates it, locking on the dictionary while doing so.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="createValue">The value factory.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.ToFormCollection(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts a dictionary to a FormCollection
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IDictionary{``1,``2}[])">
            <summary>
            Returns a new dictionary of this ... others merged leftward.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="me"></param>
            <param name="others"></param>
            <returns></returns>
            <remarks>
            Reference: http://stackoverflow.com/questions/294138/merging-dictionaries-in-c
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value of the key value based on the key, if the key is not found, a null value is returned
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TVal">The type of the val.</typeparam>
            <param name="d">The d.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.GetValueAsString``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value of the key value based on the key as it's string value, if the key is not found, then an empty string is returned
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.ContainsKeyIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>contains key ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">Value Type</typeparam>
            <returns>The contains key ignore case.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Framework.DictionaryExtensions.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="M:Umbraco.Framework.DictionaryExtensions.GetEntryIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryExtensions.GetEntryIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="M:Umbraco.Framework.DictionaryScopedCache.InvalidateItems(System.String)">
            <summary>
            Removes any item from the cache that match the regex pattern
            </summary>
            <param name="pattern"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Framework.DisposableTimer" -->
        <member name="M:Umbraco.Framework.DisposableTimer.Start(System.Action{System.Int64})">
            <summary>
            Starts the timer and invokes the specified callback upon disposal.
            </summary>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DisposableTimer.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Dynamics.BendyObject">
            <summary>
            A pliable object for representing a key-value store at runtime, which supports a deep object graph and member access by both indexer and member name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.DynamicNullableValueObject.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted. </param><param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.#ctor">
            <summary>
            Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject"/> type.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.#ctor(System.String,System.Object)">
            <summary>
            Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject"/> type.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.#ctor(System.Object)">
            <summary>
            Creates a new BendyObject instance. If <paramref name="value"/> is of type <see cref="T:Umbraco.Framework.Dynamics.BendyObject"/>, it is passed to <see cref="M:Umbraco.Framework.Dynamics.BendyObject.AddOrUpdateChild(Umbraco.Framework.Dynamics.BendyObject)"/>.
            Otherwise, a delegate for accessing each readable property of the object is added to this instance by calling <see cref="M:Umbraco.Framework.Dynamics.BendyObject.AddLazy(System.String,System.Func{System.Object})"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes, and raises <see cref="E:Umbraco.Framework.Dynamics.BendyObject.PropertyChanged"/>.
            </summary>
            <param name="prop">The property.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.AddOrUpdateChild(Umbraco.Framework.Dynamics.BendyObject)">
            <summary>
            Adds or updates a child where the name matches.
            </summary>
            <param name="bendyObject">The bendy object.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.SetMember(System.String,System.Object)">
            <summary>
            Sets the member.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.GetMember(System.String)">
            <summary>
            Gets the member.
            </summary>
            <param name="membername">The membername.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.op_Equality(Umbraco.Framework.Dynamics.BendyObject,Umbraco.Framework.Dynamics.BendyObject)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The x.</param>
            <param name="right">The y.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.op_Inequality(Umbraco.Framework.Dynamics.BendyObject,Umbraco.Framework.Dynamics.BendyObject)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.AddLazy(System.String,System.Func{System.Object})">
            <summary>
            Adds a lazy-loaded property
            </summary>
            <param name="memberName">Name of the property</param>
            <param name="callback">Callback to populate the property values</param>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.AddLazy(System.String,System.Func{System.Object,System.Object})">
            <summary>
            Adds a lazy-loaded property
            </summary>
            <param name="memberName">Name of the property</param>
            <param name="callback">Callback to populate the property values, with a reference to this <see cref="T:Umbraco.Framework.Dynamics.BendyObject"/></param>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.BendyObject.AsDynamic">
            <summary>
            Creates a dynamic version of the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.BendyObject.Item(System.String)">
            <summary>
            Gets or sets the member on this dynamic object with the specified name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:Umbraco.Framework.Dynamics.BendyObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.BendyObject.BendyObjectName">
            <summary>
            Gets or sets the name of the bendy object.
            </summary>
            <value>The name of the bendy object.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.BendyObject.BendyObjectValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.BendyObject.__KeyedChildren">
            <summary>
            Gets or sets the keyed children.
            </summary>
            <value>The keyed children.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.BendyObject.__BendyChildren">
            <summary>
            Gets the children.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Dynamics.BendyObjectCollection">
            <summary>
            A thread-safe collection of <see cref="T:Umbraco.Framework.Dynamics.BendyObject"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.EnumeratorWrapper`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.EnumeratorWrapper`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.EnumeratorWrapper`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.EnumeratorWrapper`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.EnumeratorWrapper`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.QueryWrapperForDynamics`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.Dynamics.QueryWrapperForDynamics`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.QueryWrapperForDynamics`2.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.QueryWrapperForDynamics`2.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="P:Umbraco.Framework.Dynamics.QueryWrapperForDynamics`2.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </returns>
        </member>
        <member name="T:Umbraco.Framework.EnumerableExtensions">
            <summary>
             Extensions for enumerable sources
            </summary>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>The distinct by.</summary>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TKey">Key type</typeparam>
            <returns>the unique list</returns>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.Range``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Returns a sequence of length <paramref name="count"/> whose elements are the result of invoking <paramref name="factory"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.IfNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>The for each.</summary>
            <param name="items">The items.</param>
            <param name="func">The func.</param>
            <typeparam name="TItem">item type</typeparam>
            <typeparam name="TResult">Result type</typeparam>
            <returns>the Results</returns>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>The for each.</summary>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">Item type</typeparam>
            <returns>list of TItem</returns>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.FlattenList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>The flatten list.</summary>
            <param name="items">The items.</param>
            <param name="selectChild">The select child.</param>
            <typeparam name="TItem">Item type</typeparam>
            <returns>list of TItem</returns>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if all items in the other collection exist in this collection
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the source contains any of the items in the other list
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all matching items from an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all matching items from an <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a sequence of values to ignore those which are null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll">The coll.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.EnumHelper.GetNames``1">
            <summary>
            Returns an array of string names from the enum
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.EnumHelper.GetDisplayNames``1">
            <summary>
            Returns an array of string names from the enum which takes into account any Display attributes assigned to the enum fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.EnumHelper.GetDisplayNameValueCollection``1">
            <summary>
            Returns a list of a Tuple representing the Enum: Value (int), Name, Display Name
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.ExpressionHelper">
            <summary>
            A set of helper methods for dealing with expressions
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="source">The source.</param>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="!:Expression&lt;Action&lt;T&gt;&gt;"/> provided it refers to a method call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="fromExpression"/> is null or cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="TReturn">The return type of the method.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetMethod(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to a method call.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="expression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="!:Expression&lt;Func&lt;T, TReturn&gt;&gt;"/> provided it refers to member access.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/> or null if <paramref name="fromExpression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.IsMethodSignatureEqualTo(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Determines whether the MethodInfo is the same based on signature, not based on the equality operator or HashCode.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
              <c>true</c> if [is method signature equal to] [the specified left]; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This is useful for comparing Expression methods that may contain different generic types
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to member access.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetStaticMethodInfo(System.Delegate)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from a <see cref="T:System.Delegate"/>
            </summary>
            <param name="fromMethodGroup">From method group.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.FormatUnhandledItem``1(``0)">
            <summary>
            Formats an unhandled item for representing the expression as a string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unhandledItem">The unhandled item.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.IsMethod(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a method.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is method; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.IsMember(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a member.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is member; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.IsConstant(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a constant.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is constant; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ExpressionHelper.GetFirstValueFromArguments(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Gets the first value from the supplied arguments of an expression, for those arguments that can be cast to <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Expressions.ExpressionVisitor">
            <summary>
            Provides virtual methods that can be used by subclasses to parse an expression tree.
            </summary>
            <remarks>
            This class actually already exists in the System.Core assembly but many of its methods are marked internal
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
             Visits and performs transaction on an expression.
            </summary>
            <param name="exp">The <see cref="T:System.Linq.Expressions.Expression"/> to visit and transform.</param>
            <returns>A transformed <see cref="T:System.Linq.Expressions.Expression"/> instance.</returns>
            <exception cref="T:System.NotSupportedException">Throws when a expression or sub-expression is not supported
             by the Expression visitor.</exception>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visit a bindingExp expression.
            </summary>
            <param name="bindingExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visit a element initialized expression.
            </summary>
            <param name="elementInitExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visit a Unary expression.
            </summary>
            <param name="unaryExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a binary expression.
            </summary>
            <param name="binaryExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visit a Is expression.
            </summary>
            <param name="typeBinaryExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visit a constant expression.
            </summary>
            <param name="constantExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visit a conditional expression.
            </summary>
            <param name="conditionalExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit a parameter expression.
            </summary>
            <param name="parameterExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visit a member access expression.
            </summary>
            <param name="methodExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visit a method call expression.
            </summary>
            <param name="methodCallExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visit a list expression.
            </summary>
            <param name="listExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visit a member assignment expression.
            </summary>
            <param name="assignmentExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visit a member binding expression.
            </summary>
            <param name="memberBindingExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visit a member list binding expression.
            </summary>
            <param name="listBindingExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visint a binding list expression.
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visit a element list initializer expression
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visit a expression that represents a lambda.
            </summary>
            <param name="lambdaExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visit a new expresson (ctor)
            </summary>
            <param name="newExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visit a member initialization expression.
            </summary>
            <param name="memberInitExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visit a list initializatio expression.
            </summary>
            <param name="listInitExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visit a new array expression.
            </summary>
            <param name="newArrayExp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visit a invocation expression.
            </summary>
            <param name="invocationExp"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.Expressions.PropertyVisitor">
            <summary>
            Inherits from the <see cref="T:Umbraco.Framework.Expressions.ExpressionVisitor"/> base class and implements a expression visitor
            that gets a <see cref="T:System.Reflection.PropertyInfo"/> that represents the property representd by the expresion.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Expressions.PropertyVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Overriden. Overrides all MemberAccess to build a path string.
            </summary>
            <param name="methodExp"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Expressions.PropertyVisitor.Property">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> that the expression represents.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Expressions.Remotion.CustomPartialEvaluatingExpressionTreeVisitor">
            <summary>
              This is based on <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.PartialEvaluatingExpressionTreeVisitor"/> but with a modification to avoid
              partially evaluating subtrees if the subtree is a binary expression between <see cref="M:Umbraco.Framework.Dynamics.Expressions.DynamicMemberMetadata.GetMember(System.String,System.Object)"/> and a value.
              Normally, <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.PartialEvaluatingExpressionTreeVisitor"/> would eagerly compile certain types of subtree to make them "easier" to parse
              but this would mean we'd lose the metadata contained in the <see cref="M:Umbraco.Framework.Dynamics.Expressions.DynamicMemberMetadata.GetMember(System.String,System.Object)"/> call and would just end up with the
              constant <code>False</code> evaluation return value when later visiting the <see cref="T:Remotion.Linq.QueryModel"/>.
            </summary>
            <remarks>Unfortunately <see cref="T:Remotion.Linq.Parsing.ExpressionTreeVisitors.PartialEvaluatingExpressionTreeVisitor"/> has a private constructor as of Relinq version 1.13.122.1 so some code is duplicated rather than inherited</remarks>
        </member>
        <member name="T:Umbraco.Framework.Expressions.Remotion.CustomQueryParser">
            <summary>
            Heavily based on the default <see cref="T:Remotion.Linq.Parsing.Structure.QueryParser"/> normally used in Relinq, but primary difference is that we
            need to establish a different <see cref="P:Umbraco.Framework.Expressions.Remotion.CustomQueryParser.ExpressionTreeParser"/> with a custom <see cref="!:DynamicTransformingExpressionTreeProcessor"/>
            in place of the default <see cref="T:Remotion.Linq.Parsing.Structure.ExpressionTreeProcessors.TransformingExpressionTreeProcessor"/> in order to avoid it from precompiling certain expressions
            such as those referencing <see cref="F:Umbraco.Framework.Dynamics.Expressions.DynamicMemberMetadata.GetMemberMethod"/> in order to reference dynamic operations inside
            regular .NET 3.5 expression trees. Relinq doesn't support <see cref="T:System.Linq.Expressions.DynamicExpression"/> from .NET 4 at time of writing.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Expressions.Remotion.CustomQueryParser.EnsureCustomModifiersRegisteredWithRelinq">
            <summary>
            Ensures the custom modifiers are registered with Relinq.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.FileSystemInfoExtensions.RelativePathOfItem(System.IO.DirectoryInfo,System.IO.FileSystemInfo)">
            <summary>
            Calculates the FileSystemInfo object's relative path to a DirectoryInfo object
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.FileSystemInfoExtensions.EnumerateFileSystemInfosRecursive(System.IO.DirectoryInfo)">
            <summary>
            Retreives all FileSystemInfo objects underneath a specified directory and all child directories recursively
            </summary>
        </member>
        <member name="T:Umbraco.Framework.GlobalExtensions">
            <summary>The global extensions.</summary>
        </member>
        <member name="M:Umbraco.Framework.GlobalExtensions.Format(System.TimeSpan,System.String)">
            <summary>format the timespan</summary>
            <param name="timeSpan">The time span.</param>
            <param name="format">The format.</param>
            <returns>The formatted timespan.</returns>
        </member>
        <member name="M:Umbraco.Framework.GlobalExtensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Framework.GlobalExtensions.IfTrue(System.Boolean,System.Action)">
            <summary>The if true.</summary>
            <param name="predicate">The predicate.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Umbraco.Framework.GlobalExtensions.IfNotNull``2(``1,System.Func{``1,``0},``0)">
            <summary>
            Checks if the item is not null, and if so returns an action on that item, or a default value
            </summary>
            <typeparam name="TResult">the result type</typeparam>
            <typeparam name="TItem">The type</typeparam>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.GlobalExtensions.IfNull``1(``0,System.Func{``0,``0})">
            <summary>
            Checks if the value is null, if it is it returns the value specified, otherwise returns the non-null value
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="item"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.HiveId.op_Explicit(System.Guid)~Umbraco.Framework.HiveId">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Umbraco.Framework.HiveId"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveId.op_Explicit(System.Int32)~Umbraco.Framework.HiveId">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Umbraco.Framework.HiveId"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveId.HiveEntityUriDecode(System.String)">
            <summary>
            Decodes the string to a Uri string
            </summary>
            <param name="encoded"></param>
            <returns>
            </returns>
        </member>
        <member name="M:Umbraco.Framework.HiveId.HiveEntityUriEncode(System.String)">
            <summary>
            Encodes the uri string to be used inside of Urls
            </summary>
            <param name="decoded"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.HiveId.ToFriendlyString">
            <summary>
            Outputs a string for use with display/presentation. A shortcut for <code>ToString(HiveIdFormatStyle.UriSafe)</code>.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveId.Parse(System.String)">
            <summary>
            Parses the specified formatted value.
            </summary>
            <param name="formattedValue">The formatted value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.HiveIdComparer">
            <summary>
            Equality comparer to compare to HiveIds based on whether to compare providers or not
            </summary>
        </member>
        <member name="M:Umbraco.Framework.HiveIdExtensions.ToJsonObject(Umbraco.Framework.HiveId)">
            <summary>
            Returns a JObject representing the HiveId for use in JavaScript
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.HiveIdExtensions.CompareStrings(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Compares two strings by parsing them as <see cref="T:Umbraco.Framework.HiveId"/> to check equality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="ignoreProviderId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.HiveIdExtensions.GetHtmlId(Umbraco.Framework.HiveId)">
            <summary>
            Convert the HiveId to a compatible Id used for Html elements
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.HiveIdExtensions.IsNullValueOrEmpty(Umbraco.Framework.HiveId)">
            <summary>
            Determines whether <paramref name="id"/> is null or empty.
            </summary>
            <param name="id">The id.</param>
            <returns><c>true</c> if [is null or empty] [the specified id]; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdExtensions.ConvertToEmptyIfNullValue(Umbraco.Framework.HiveId)">
            <summary>
            Returns null if the id is null or empty, otherwise returns the id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Framework.HiveIdFormatStyle.AsUri">
            <summary>
            The serialization format persists the <see cref="T:Umbraco.Framework.HiveId"/> as a Uri.
            </summary>
        </member>
        <member name="F:Umbraco.Framework.HiveIdFormatStyle.UriSafe">
            <summary>
            The serialization format persists the <see cref="T:Umbraco.Framework.HiveId"/> as a dot-separated value, for example
            <value>scheme.provider-group-root.provider-id.value-type.value</value>
            </summary>
        </member>
        <member name="F:Umbraco.Framework.HiveIdFormatStyle.AutoSingleValue">
            <summary>
            The serialization format persists only the raw value as a string and attempts to auto-detect the type (<see cref="T:System.Guid"/>, <see cref="T:System.Int32"/> etc.) based on checking the validity of the incoming value for each type.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.HiveIdTypeConverter">
            <summary>
            A custom type converter for the <see cref="T:Umbraco.Framework.HiveIdValue"/> type
            </summary>
        </member>
        <member name="T:Umbraco.Framework.HiveIdValue">
            <summary>
            A structure representing a value that can be a string, an integer or a <see cref="T:System.Guid"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.HiveIdValue"/> struct from a string value.
            </summary>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.HiveIdValue"/> struct from a string value.
            </summary>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.TryCreate(System.Object,Umbraco.Framework.HiveIdValueTypes)">
            <summary>
            Tries to create a <see cref="T:Umbraco.Framework.HiveIdValue"/> given the provided value and type.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.HiveIdValue"/> struct from an integer value.
            </summary>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.HiveIdValue"/> struct from a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="F:Umbraco.Framework.HiveIdValue.Empty">
            <summary>
            An empty <see cref="T:Umbraco.Framework.HiveIdValue"/>
            </summary>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.op_Explicit(Umbraco.Framework.HiveIdValue)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Umbraco.Framework.HiveIdValue"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="other">The other.</param>
            <returns>The result of the conversion.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.op_Explicit(Umbraco.Framework.HiveIdValue)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Umbraco.Framework.HiveIdValue"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="other">The other.</param>
            <returns>The result of the conversion.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.op_Explicit(Umbraco.Framework.HiveIdValue)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Umbraco.Framework.HiveIdValue"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="other">The other.</param>
            <returns>The result of the conversion.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.op_Equality(System.Guid,Umbraco.Framework.HiveIdValue)">
            <summary>
            Implements the operator == between <see cref="T:System.Guid"/> and <see cref="T:Umbraco.Framework.HiveIdValue"/>.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.op_Inequality(System.Guid,Umbraco.Framework.HiveIdValue)">
            <summary>
            Implements the operator != between <see cref="T:System.Guid"/> and <see cref="T:Umbraco.Framework.HiveIdValue"/>.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.HiveIdValue.Equals(Umbraco.Framework.HiveIdValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.HiveIdValue.Type">
            <summary>
            Gets or sets the type of the id value.
            </summary>
            <value>The type.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.HiveIdValue.Value">
            <summary>
            Gets or sets the original id value.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.HiveIdValue.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is a system value.
            </summary>
            <value><c>true</c> if this instance is system; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.HiveIdValueTypeConverter">
            <summary>
            A custom type converter for the <see cref="T:Umbraco.Framework.HiveIdValue"/> type
            </summary>
        </member>
        <member name="T:Umbraco.Framework.HttpRequestScopedCache">
            <summary>
            A Scoped Cache provider which stores items in the HttpContext.Items cache.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.HttpRequestScopedCache.InvalidateItems(System.String)">
            <summary>
            Removes any item from the cache that match the regex pattern
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="T:Umbraco.Framework.HttpRuntimeApplicationCache">
            <summary>
            An Application Cache provider which stores its items in the HttpRuntime Cache
            </summary>
        </member>
        <member name="M:Umbraco.Framework.HttpRuntimeApplicationCache.GetOrCreate``1(System.String,System.Func{Umbraco.Framework.HttpRuntimeCacheParameters{``0}})">
            <summary>
            Gets or Creates the cache item
            </summary>
            <param name="key"></param>
            <param name="callback">Callback to create the cache item if it doesn't exist</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.HttpRuntimeApplicationCache.InvalidateItems(System.String)">
            <summary>
            Removes any item from the cache that match the regex pattern
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="T:Umbraco.Framework.HttpRuntimeCacheParameters`1">
            <summary>
            Parameters used with the AbstractApplicationCache
            </summary>
        </member>
        <member name="M:Umbraco.Framework.HttpRuntimeCacheParameters`1.#ctor(`0)">
            <summary>
            Creates a default HttpRuntimeCacheParameters object with no dependencies, callbacks and with sliding expiration of 30 mins
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Umbraco.Framework.HttpRuntimeCacheParameters`1.AbsoluteExpiration">
            <summary>
            If you are using SlidingExpiration this should be set to Cache.NoAbsoluteExpiration
            </summary>
        </member>
        <member name="P:Umbraco.Framework.HttpRuntimeCacheParameters`1.SlidingExpiration">
            <summary>
            If you are using AbsoluteExpiration this should be set to Cache.NoSlidingExpiration
            </summary>
        </member>
        <member name="T:Umbraco.Framework.ICanBeDirty">
            <summary>
            An interface that defines that the object is tracking property changes and if it is Dirty
            </summary>
        </member>
        <member name="T:Umbraco.Framework.DirtyExtensions">
            <summary>
            Extension methods for ICanBeDirty interface
            </summary>
        </member>
        <member name="M:Umbraco.Framework.DirtyExtensions.TrySetPropertyFromDirty``4(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``2,System.Linq.Expressions.Expression{System.Func{``2,``3}})">
            <summary>
            Sets the property value on the destination to the source property if the source property is dirty
            </summary>
            <typeparam name="TDestination"></typeparam>
            <typeparam name="TDestinationProperty"></typeparam>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TSourceProperty"></typeparam>
            <param name="destination"></param>
            <param name="prop"></param>
            <param name="source"></param>
            <param name="dirtyProp"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DirtyExtensions.TrySetPropertyFromDirty``4(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``2,System.Linq.Expressions.Expression{System.Func{``2,``3}},System.Func{``1})">
            <summary>
            Sets the property value on the destination to the source property if the source property is dirty
            </summary>
            <typeparam name="TDestination"></typeparam>
            <typeparam name="TDestinationProperty"></typeparam>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TSourceProperty"></typeparam>
            <param name="destination"></param>
            <param name="prop"></param>
            <param name="source"></param>
            <param name="dirtyProp"></param>
            <param name="valueGetter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DirtyExtensions.IsPropertyDirty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Checks if a property is Dirty based on a property selector
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="e"></param>
            <param name="propSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.DirtyExtensions.SetAllChangedProperties``2(``0,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Sets all properties from the source to the destination object for any property that has changed (IsDirty) on the source 
            object. If any of the properties are indexed properties, they will not be set.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.IReferenceByAlias.Alias">
            <summary>
            Gets or sets the alias of the object. The alias is a string to which this object
            can be referred programmatically, and is often a normalised version of the <see cref="!:Name"/> property.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="T:Umbraco.Framework.IReferenceByHiveId">
            <summary>
            Stipulates that implementing types must have an <see cref="P:Umbraco.Framework.IReferenceByHiveId.Id"/> property of type <see cref="T:Umbraco.Framework.HiveId"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.IReferenceByHiveId.Id">
            <summary>
              Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Umbraco.Framework.IReferenceByName">
            <summary>
            Defines an object that can be referenced by a human-readable alias
            </summary>
        </member>
        <member name="P:Umbraco.Framework.IReferenceByName.Name">
            <summary>
            Gets or sets the name of the object. The name is a string intended to be human-readable, and
            is often a more descriptive version of the <see cref="P:Umbraco.Framework.IReferenceByAlias.Alias"/> property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Umbraco.Framework.LambdaExpressionCacheKey">
            <summary>
            Represents a simple <see cref="T:System.Linq.Expressions.LambdaExpression"/> in a form which is suitable for using as a dictionary key
            by exposing the return type, argument types and expression string form in a single concatenated string.
            </summary>
        </member>
        <member name="F:Umbraco.Framework.LambdaExpressionCacheKey.ArgTypes">
            <summary>
            The argument type names of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:Umbraco.Framework.LambdaExpressionCacheKey.ReturnType">
            <summary>
            The return type of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:Umbraco.Framework.LambdaExpressionCacheKey.ExpressionAsString">
            <summary>
            The original string representation of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="M:Umbraco.Framework.LambdaExpressionCacheKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.LambdaExpressionCacheKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.LambdaExpressionCacheKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Umbraco.Framework.LazyConcurrentDictionary`2">
            <summary>
            Represents a concurrent threadsafe dictionary of items supporting lazy-loading of the values.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.LazyDictionary`2">
            <summary>
            Represents a dictionary of items supporting lazy-loading of the values.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. The delegates provided in order to lazily load the item values
            will be invoked.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.Add(`0,System.Lazy{`1})">
            <summary>
            Adds an element with the provided key and value loader to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="valueLoader">The value loader.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param><param name="value">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.AddOrUpdate(`0,System.Lazy{`1},System.Func{`0,System.Lazy{`1},System.Lazy{`1}})">
            <summary>
            Adds an item or updates it if an item with that key already exists in the collection.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="updator">The updator.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.AddOrUpdate(`0,`1)">
            <summary>
             Adds an item or updates it if an item with that key already exists in the collection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Framework.LazyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:Umbraco.Framework.LazyDictionary`2.Inner">
            <summary>
            Exposes the inner dictionary
            </summary>
        </member>
        <member name="P:Umbraco.Framework.LazyDictionary`2.LazyLoadFactory">
            <summary>
            Gets or sets the lazy load factory which is responsible for returning elements which should populate this dictionary when
            this dictionary is first enumerated.
            </summary>
            <value>The lazy load factory.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.LazyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Umbraco.Framework.LazyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Umbraco.Framework.LazyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:Umbraco.Framework.LazyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Umbraco.Framework.LazyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.LazyConcurrentDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Framework.LazyConcurrentDictionary`2.Add(`0,System.Lazy{`1})">
            <summary>
            Adds an element with the provided key and value loader to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="valueLoader">The value loader.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.LazyConcurrentDictionary`2.AddOrUpdate(`0,System.Lazy{`1},System.Func{`0,System.Lazy{`1},System.Lazy{`1}})">
            <summary>
            Adds an item or updates it if an item with that key already exists in the collection.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="updator">The updator.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.LazyConcurrentDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractExpressionExtension`1">
            <summary>
            Represents an abstract, custom boolean expression. In .NET 4 for creating custom expressions it is recommended to override
            the <see cref="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractExpressionExtension`1.NodeType"/> and <see cref="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractExpressionExtension`1.Type"/> properties rather than using the obsolete constructor on <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractExpressionExtension`1.NodeType">
            <summary>
            Gets the node type of this <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>One of the <see cref="T:System.Linq.Expressions.ExpressionType"/> values.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractExpressionExtension`1.Type">
            <summary>
            Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"/> represents.
            </summary>
            <returns>The <see cref="T:System.Type"/> that represents the static type of the expression.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractPredicateExpression`2">
            <summary>
            An expression which represents a predicate on a schema of fields, comprising a <typeparam name="TSelector" /> to select the schema,
            and a <typeparam name="TValueSelector"/> to indicate the value and operator.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractPredicateExpression`2.SelectorExpression">
            <summary>
            Gets or sets the selector expression (for example, the field or the schema of an entity).
            </summary>
            <value>The schema selector.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractPredicateExpression`2.ValueExpression">
            <summary>
            Gets or sets the value expression (for example, the value of the field or schema represented by the <see cref="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractPredicateExpression`2.SelectorExpression"/>.
            </summary>
            <value>The schema value.</value>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractValueExpression">
            <summary>
            An expression which represents a value for consideration in an operation, given the <see cref="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractValueExpression.ClauseType"/> and the value itself.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractValueExpression.ClauseType">
            <summary>
            Gets the type of the clause.
            </summary>
            <value>The type of the clause.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractValueExpression.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractValueExpression.NodeType">
            <summary>
            Gets the node type of this <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Linq.Expressions.ExpressionType"/> values.</returns>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractValueExpression.Type">
            <summary>
            Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"/> represents.
            </summary>
            <returns>The <see cref="T:System.Type"/> that represents the static type of the expression.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldPredicateExpression">
            <summary>
            An expression which represents a predicate on a field, comprising a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression"/> to select the field,
            and a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldValueExpression"/> to indicate the value and operator.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldPredicateExpression.#ctor(Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression,Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldValueExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldPredicateExpression"/> class.
            </summary>
            <param name="fieldSelector">The field selector.</param>
            <param name="fieldValue">The field value.</param>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression">
            <summary>
            An expression which represents the selection of a field by a <see cref="T:System.String"/> alias. Designed to nominate a key in a key-value system.
            </summary>
            <remarks>
            This expression can also represent querying a field with an optional value key. This is useful for querying against 
            fields that store multiple values and a query is required to query against a particular value key.
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression"/> class.
            </summary>
            <param name="name">The name.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="valueKey">The value key.</param>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>The name of the field.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression.ValueKey">
            <summary>
            Gets or sets the value key.
            </summary>
            <value>
            The value key.
            </value>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldValueExpression">
            <summary>
            An expression which represents a value for consideration in an operation, given the <see cref="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractValueExpression.ClauseType"/> and the value itself.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldValueExpression.#ctor(Umbraco.Framework.Linq.CriteriaGeneration.Expressions.ValuePredicateType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldValueExpression"/> class.
            </summary>
            <param name="clauseType">Type of the clause.</param>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaPredicateExpression">
            <summary>
            An expression which represents a predicate on a schema of fields, comprising a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaSelectorExpression"/> to select the schema,
            and a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaValueExpression"/> to indicate the value and operator.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaPredicateExpression.#ctor(Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaSelectorExpression,Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaValueExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaSelectorExpression.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaSelectorExpression"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaSelectorExpression.Name">
            <summary>
            Gets the name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaValueExpression">
            <summary>
            An expression which represents a value for consideration in an operation, given the <see cref="P:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.AbstractValueExpression.ClauseType"/> and the value itself.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.SchemaValueExpression.#ctor(Umbraco.Framework.Linq.CriteriaGeneration.Expressions.ValuePredicateType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldValueExpression"/> class.
            </summary>
            <param name="clauseType">Type of the clause.</param>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.ValuePredicateType">
            <summary>
            An enumeration of the possible predicates for a value.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.AbstractExpressionTreeVisitor.VisitMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits a member expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.AbstractExpressionTreeVisitor.VisitMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a method call expression, returning a rewritten expression if supported.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.AbstractExpressionTreeVisitor.VisitBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a binary expression, returning a rewritten expression if supported.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.AbstractExpressionTreeVisitor.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a constant expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.DefaultExpressionTreeVisitor">
            <summary>
            A default implementation of an expression tree visitor designed to take an expression tree and rewrite it to the more simplified
            model supported by the Umbraco Framework and its descendent persistence providers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.DefaultExpressionTreeVisitor.#ctor(Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.DefaultExpressionTreeVisitor"/> class.
            </summary>
            <param name="structureBinder">The structure binder.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.DefaultExpressionTreeVisitor.RewriteToFieldPredicateTree(System.Linq.Expressions.Expression)">
            <summary>
            Rewrites the expression tree to a field predicate tree.
            </summary>
            <param name="expressionToVisit">The expression to visit.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.DefaultExpressionTreeVisitor.RewriteToFieldPredicateTree(System.Linq.Expressions.Expression,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder)">
            <summary>
            Rewrites the expression tree to a field predicate tree given an <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder"/> implementation.
            </summary>
            <param name="expressionToVisit">The expression to visit.</param>
            <param name="structureBinder">The structure binder.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.FieldPredicateExpressionRewriter">
            <summary>
            A static class containing helper methods to rewrite expressions into <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldPredicateExpression"/> trees where appropriate.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.FieldPredicateExpressionRewriter.IsConvertibleBinary(System.Linq.Expressions.BinaryExpression,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder)">
            <summary>
            Determines whether the supplied <see cref="T:System.Linq.Expressions.BinaryExpression"/> is convertible to a binary in the context of the featureset of
            the Umbraco Framework-supported expression tree.
            </summary>
            <param name="expression">The expression.</param>
            <param name="structureBinder">The structure binder.</param>
            <returns><c>true</c> if [is convertible binary] [the specified expression]; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.FieldPredicateExpressionRewriter.GetBindingSupport(System.Linq.Expressions.Expression,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder)">
            <summary>
            Gets a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport"/> from an expression.
            </summary>
            <param name="left">The left.</param>
            <param name="structureBinder">The structure binder.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.FieldPredicateExpressionRewriter.NegateFieldPredicate(Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldPredicateExpression)">
            <summary>
            Negates a field predicate, i.e. reverses its <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.ValuePredicateType"/> for example Equals will be switched to NotEquals.
            </summary>
            <param name="fieldPredicateExpression">The field predicate expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.FieldPredicateExpressionRewriter.ConvertToFieldPredicate(System.Linq.Expressions.BinaryExpression,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder)">
            <summary>
            Converts a <see cref="T:System.Linq.Expressions.BinaryExpression"/> to a field predicate expression, if supported and convertible.
            </summary>
            <param name="expression">The expression.</param>
            <param name="structureBinder">The structure binder.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.FieldPredicateExpressionRewriter.GetFieldSelector(System.Linq.Expressions.Expression,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport)">
            <summary>
            Gets a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression"/> from an expression it the <paramref name="bindingSignatureSupport"/> identifies it as supported.
            </summary>
            <param name="left">The left.</param>
            <param name="structureBinder">The structure binder.</param>
            <param name="bindingSignatureSupport">The binding signature support.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor">
            <summary>
            Visits a <see cref="T:Remotion.Linq.QueryModel"/> object and rewrites it into a <see cref="T:Umbraco.Framework.Linq.QueryModel.QueryDescription"/> object.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.#ctor(Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder,Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.AbstractExpressionTreeVisitor)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor"/> class.
            </summary>
            <param name="structureBinder">The structure binder.</param>
            <param name="treeVisitor">The tree visitor.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.FromQueryModel(Remotion.Linq.QueryModel,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder,Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.AbstractExpressionTreeVisitor)">
            <summary>
            Creates a new <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor"/>, and returns the result of running <see cref="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.VisitAndGenerateQueryDescription(Remotion.Linq.QueryModel)"/> on the
            supplied <paramref name="queryModel"/>.
            </summary>
            <param name="queryModel">The query model.</param>
            <param name="structureBinder">The structure binder.</param>
            <param name="treeVisitor">The tree visitor.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.FromQueryModel(Remotion.Linq.QueryModel)">
            <summary>
            Creates a new <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor"/>, and returns the result of running <see cref="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.VisitAndGenerateQueryDescription(Remotion.Linq.QueryModel)"/> on the
            supplied <paramref name="queryModel"/>.
            </summary>
            <param name="queryModel">The query model.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.VisitAndGenerateQueryDescription(Remotion.Linq.QueryModel)">
            <summary>
            Visits the <paramref name="queryModel"/> and generates a <see cref="T:Umbraco.Framework.Linq.QueryModel.QueryDescription"/>.
            </summary>
            <param name="queryModel">The query model.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Visits the additional from clause.
            </summary>
            <param name="fromClause">From clause.</param>
            <param name="queryModel">The query model.</param>
            <param name="index">The index.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.VisitMainFromClause(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)">
            <summary>
            Visits the main from clause.
            </summary>
            <param name="fromClause">From clause.</param>
            <param name="queryModel">The query model.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.VisitResultOperator(Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Visits the result operator.
            </summary>
            <param name="resultOperator">The result operator.</param>
            <param name="queryModel">The query model.</param>
            <param name="index">The index.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.VisitSelectClause(Remotion.Linq.Clauses.SelectClause,Remotion.Linq.QueryModel)">
            <summary>
            Visits the select clause.
            </summary>
            <param name="selectClause">The select clause.</param>
            <param name="queryModel">The query model.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.ExpressionVisitors.QueryModelVisitor.VisitWhereClause(Remotion.Linq.Clauses.WhereClause,Remotion.Linq.QueryModel,System.Int32)">
            <summary>
            Visits the where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
            <param name="queryModel">The query model.</param>
            <param name="index">The index.</param>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder">
            <summary>
            When implemented in a derived class, provides a mechanism to assess certain types of expression and determine whether
            they are supported by the provider. For example, implementors of this class may advertise that the expression for the
            <see cref="M:System.String.EndsWith(System.String)"/> is supported.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder.IsSupportedMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Determines whether the expression represents a supported method call.
            </summary>
            <param name="expression">The expression.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder.IsSupportedMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Determines whether the expression represents a supported member access call, and if so the type of support is described by the returned <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport"/>.
            </summary>
            <param name="expression">The expression.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder.CreateFieldSelector(System.Linq.Expressions.MethodCallExpression,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport)">
            <summary>
            Creates a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression"/> from a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="expression">The expression.</param>
            <param name="reportedSignatureSupport">A component outlining the supported expression structure of this provider.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder.CreateFieldSelector(System.Linq.Expressions.MemberExpression,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport)">
            <summary>
            Creates a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression"/> from a <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <param name="expression">The expression.</param>
            <param name="reportedSignatureSupport">A component outlining the supported expression structure of this provider.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder.CreateFieldValueExpression(System.Linq.Expressions.MethodCallExpression,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport)">
            <summary>
            Creates a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldValueExpression"/> from a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="expression">The expression.</param>
            <param name="reportedSignatureSupport">A component outlining the supported expression structure of this provider.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport">
            <summary>
            Provides metadata to an expression tree binder in order to identify which types of methods or members are denoted by which <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.ValuePredicateType"/>
            by returning a <see cref="P:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport.SignatureSupportType"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport.#ctor(Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.SignatureSupportType,Umbraco.Framework.Linq.CriteriaGeneration.Expressions.ValuePredicateType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport"/> class.
            </summary>
            <param name="signatureSupportType">Type of the signature support.</param>
            <param name="nodeType">Type of the node.</param>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport.SignatureSupportType">
            <summary>
            Gets or sets the type of the signature support.
            </summary>
            <value>The type of the signature support.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport.NodeType">
            <summary>
            Gets or sets the type of the node.
            </summary>
            <value>The type of the node.</value>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.DefaultQueryStructureBinder">
            <summary>
            Provides a mechanism to assess certain types of expression and determine whether they are supported by the expression binding provider. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.DefaultQueryStructureBinder.CreateFieldSelector(System.Linq.Expressions.MethodCallExpression,Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport)">
            <summary>
            Creates a <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression"/> from a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="expression">The expression.</param>
            <param name="reportedSignatureSupport">A component outlining the supported expression structure of this provider.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.DefaultQueryStructureBinder.IsSupportedMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Determines whether the expression represents a supported method call.
            </summary>
            <param name="expression">The expression.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.DefaultQueryStructureBinder.IsSupportedMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Determines whether the expression represents a supported member access call.
            </summary>
            <param name="expression">The expression.</param>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.QueryStructureBinderOfTypeAttribute">
            <summary>
            Used to identify that decorated classes should use the provided <see cref="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.AbstractQueryStructureBinder"/> when converting
            expressions containing the type to a <see cref="P:Umbraco.Framework.Linq.QueryModel.QueryDescription.Criteria"/> expression.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.QueryStructureBinderOfTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Attribute"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.QueryStructureBinderOfTypeAttribute.StructureBinder">
            <summary>
            Gets or sets the structure binder type.
            </summary>
            <value>The structure binder.</value>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.CriteriaGeneration.StructureMetadata.SignatureSupportType">
            <summary>
            An enumeration of ways in which a method or member signature is supported.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Linq.QueryModel.QueryDescriptionCacheKey">
            <summary>
            Represents a <see cref="T:Umbraco.Framework.Linq.QueryModel.QueryDescription"/> in a form that is normalised and performant for use as a dictionary or cache key.
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Linq.QueryModel.QueryDescriptionCacheKey.CriteriaString">
            <summary>
            The <see cref="P:Umbraco.Framework.Linq.QueryModel.QueryDescription.Criteria"/> as a string.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.LocalizationHtmlHelperExtensions.WrapList``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{Umbraco.Framework.Localization.Processing.ParameterValues.DelegateValueFormatArgs{System.Object,``0},System.Object})">
            <summary>
            Wraps the elements in the list with the specified format.
            Not that the value selector is a string expression as anonymous types doesn't support delegates and that how this method is supposed to be used
            </summary>
            <typeparam name="TReference">The type of the reference.</typeparam>
            <param name="value">The value.</param>
            <param name="format">The format.</param>
            <param name="valueSelectorExpression">The value selector expression. If null the list item is used</param>
            <returns>A list of <see cref="T:Umbraco.Framework.Localization.Processing.ParameterValues.DelegateFormatWrapper"/>s for each element in the list</returns>
        </member>
        <member name="P:Umbraco.Framework.Localization.Configuration.LocalizationConfig.TextManager">
            <summary>
            Gets the current text manager as defined by TextManagerResolver.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Configuration.LocalizationSourceAttribute">
            <summary>
            Represent a source for translations for an assembly
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Configuration.LocalizationSourceAttribute.GetSource(System.Reflection.Assembly,Umbraco.Framework.Localization.TextManager,System.String)">
            <summary>
            Gets the source.
            </summary>
            <param name="asm">The assembly to load from.</param>
            <param name="textManager">The text manager.</param>
            <param name="targetNamespace">The default namespace expected for the assembly when adding texts</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Localization.Configuration.LocalizationXmlSourceAttribute.ResourceName">
            <summary>
            Gets or sets the name of the resource. The resource name is evaluated using EndsWith so the assembly's namespace is not required in the resource name
            </summary>
            <value>
            The name of the resource.
            </value>
        </member>
        <member name="M:Umbraco.Framework.Localization.DateTimeHelpers.AdjustToTimeZone(System.DateTime)">
            <summary>
            Adjusts the date to the context's current time zone as defined by the current <see cref="T:Umbraco.Framework.Localization.TextManager"/>
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.DateTimeHelpers.AdjustToTimeZone(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Adjusts the date to the <see cref="T:System.TimeZoneInfo"/> specified
            </summary>
            <param name="date">The date.</param>
            <param name="timeZoneInfo">The time zone info.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.Localization.DefaultTextManager">
            <summary>
            A default implementation of TextManager where the current language is given by the evaluation of the delegate
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.TextManager.KnownAssemblyExclusionFilter">
            <summary>
            Assemblies to exclude from the scan to find text
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.TextManager._textCache">
            <summary>
            Namespace/Key/Language
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.TextManager.Get``1(System.String,System.Object,Umbraco.Framework.Localization.LanguageInfo,System.String,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.String)">
            <summary>
            Gets the text with the specified namespace and key for the specified language.
            If namespace is null the assembly asm is passed to the implementation of GetCurrentNamespace
            </summary>
            <typeparam name="TNamespace">The type's assembly will be used for namespacing if ns is omitted</typeparam>
            <param name="key">The key of the text to get</param>
            <param name="values">An IDictionary&lt;string,object&gt; or anonymous type</param>
            <param name="language">If null the current language</param>
            <param name="ns">If null the current namespace</param>
            <param name="debug">Show debug output instead of evaluating the text's pattern. If null (the default) the current implementation of IsInDebugMode is used</param>
            <param name="returnNullOnMissing">if set to <c>true</c> null is returned on missing texts. This has no effect if no key is specified as the string is the default text</param>
            <param name="encode">if set to <c>true</c> the text is encoded using the current text managers encoder.</param>
            <param name="fallback">A fallback value if no localized value can be found.</param>
            <returns>
            The translated string
            </returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.TextManager.Get(System.String,System.Object,Umbraco.Framework.Localization.LanguageInfo,System.String,System.Reflection.Assembly,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.String)">
            <summary>
            Gets the text with the specified namespace and key for the specified language.
            If namespace is null the assembly asm is passed to the implementation of GetCurrentNamespace
            </summary>
            <param name="ns">If null the current namespace</param>
            <param name="key">The key of the text to get</param>
            <param name="language">If null the current language</param>        
            <param name="callingAssembly">The calling assembly. If helper methods invoke this method they should pass Assembly.GetCallingAssembly() to ensure that namespaces are handled correctly</param>        
            <param name="debug">Show debug output instead of evaluating the text's pattern</param>
            <param name="returnNullOnMissing">if set to <c>true</c> null is returned on missing texts. This has no effect if no key is specified as the string is the default text</param>
            <param name="encode">if set to <c>true</c> the text is encoded using the current text managers encoder.</param>
            <param name="fallback">A fallback value if no localized value can be found.</param>
            <returns>The translated string</returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.TextManager.ParseAllPatterns">
            <summary>
            Parses all patterns. Regarding thread safety: An exception will occur if texts are changed while this method executes
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.TextManager.PrepareTextSources(System.String,System.String,Umbraco.Framework.Localization.LanguageInfo)">
            <summary>
            Implementing classes may override this method to add text sources on demand.        
            </summary>
            <param name="ns">The ns.</param>
            <returns>true if the namespace was loaded</returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.TextManager.SourceTextsChanged(System.Object,System.EventArgs)">
            <summary>
            This method is called when the text source's texts have changed.        
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.TextManager.GetCurrentNamespace(System.Reflection.Assembly)">
            <summary>
            Gets the current namespace given the calling assembly
            </summary>
            <param name="callingAssembly">If TrackCallingAssembly returns false this parameter is null</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.TextManager.GetNamespace(System.Reflection.Assembly)">
            <summary>
            Gets the namespace used for texts corresponding to the specified assembly
            </summary>   
        </member>
        <member name="M:Umbraco.Framework.Localization.TextManager.GetNamespace``1">
            <summary>
            Gets the namespace used for texts corresponding to the assembly of the specified type
            </summary>        
        </member>
        <member name="P:Umbraco.Framework.Localization.TextManager.MissingTextHandler">
            <summary>
            Gets or sets the handler that controls the response when texts are missing. (Default is null).
            </summary>
            <value>
            The missing text handler.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.TextManager.FallbackNamespaces">
            <summary>
            If not matching texts are found in the specified namespace these namespaces will be searched in reverse order
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.TextManager.FallbackLanguages">
            <summary>
            Gets or sets the fallback languages. These are used for all language infos if no matching text is found in reverse order
            </summary>
            <value>
            The fallback languages.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.TextManager.CurrentEntries">
            <summary>
            Gets the current entries.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.TextManager.StringEncoder">
            <summary>
            Used to encode text generated from patterns. The content of formatting groups is not encoded
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.DefaultTextManager.CurrentLanguage">
            <summary>
            This delegate is used to resolve the current language;
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.DefaultTextManager.DebugMode">
            <summary>
            If this is specified and returns true debug information about the texts will be returned. (See DebugFunction).
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.DefaultTextManager.EnableHtmlPatterns">
            <summary>
            Enables the Html tags in patterns using the default dialect. 
            It will change the syntax for format groups from "&lt;Group: ... &gt;" to "&lt;!Group: ... &gt;"
            </summary>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Framework.Localization.DefaultTextManager.probedNamespaces">
            <summary>
            Only search for assemblies once.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.DefaultTextManager.PrepareTextSources(System.Reflection.Assembly)">
            <summary>
            Prepares the text sources from the specified assembly.
            </summary>
            <param name="asm">The assembly.</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Localization.DefaultTextManager.DebugFormatter">
            <summary>
            The function used to write debug information about texts. If null default behavior is used.
            Arguments: Namespace, Key, Language, Mathing text (if any), the parameters for the text
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.DefaultTextManager.UseNamespaces">
            <summary>
            If the calling assemblies' name are used as namespace for keys
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.ExceptionHelper">
            <summary>
            Helper for localizing exception messages.
            </summary>    
        </member>
        <member name="M:Umbraco.Framework.Localization.ExceptionHelper.GetMessage(System.String)">
            <summary>
            Gets the message.
            </summary>
            <param name="baseMessage">The base exceptions message to allow framework texts if not default message is specified.</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Localization.ExceptionHelper.Key">
            <summary>
            Gets or sets the key used for finding the localized text.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.ExceptionHelper.DefaultMessage">
            <summary>
            Gets or sets the default message if no localization entry is found.
            </summary>
            <value>
            The default message.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.ExceptionHelper._parameters">
            <summary>
            Gets or sets the parameters. These are used in the localization and added as {0}, {1}, {2} etc. for string.Format when the default message is returned
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.ExceptionHelper.For">
            <summary>
            Gets the exception the helper is for.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.LanguageInfo">
            <summary>
            Represent a "language" that is used for translating texts
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.LanguageInfo.Key">
            <summary>
            The key used for the language in text sources
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.LanguageInfo.Culture">
            <summary>
            The format provider used to format values 
            </summary>        
        </member>
        <member name="P:Umbraco.Framework.Localization.LanguageInfo.Fallbacks">
            <summary>
            If a text is not available in this language these fallbacks are considered
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.LanguageInfo.Alias">
            <summary>
            Gets or sets the alias of the object. The alias is a string to which this object
            can be referred programmatically, and is often a normalised version of the <see cref="P:Umbraco.Framework.IReferenceByName.Name"/> property.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Umbraco.Framework.Localization.LanguageInfo.Name">
            <summary>
            The description/name of the language (e.g. "Danish (not the pastry)")
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Localization`1">
            <summary>
            Inherit from this class to make a simple way to get texts for the current assembly.
            </summary>
            <typeparam name="TNamespaceRef"></typeparam>
        </member>
        <member name="T:Umbraco.Framework.Localization.LocalizedText">
            <summary>
            Represent the pattern used to expand the translation for the text with the specified key in the specified language
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.LocalizedText.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.LocalizedText.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            Two <see cref="T:Umbraco.Framework.Localization.LocalizedText"/>s are equal if namespace, key, language, pattern and pattern dialect are equal
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Umbraco.Framework.Localization.LocalizedText.Key">
            <summary>
            The unique key for the localized text not including language
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.LocalizedText.Language">
            <summary>
            The language in which the pattern generates a translation for the key
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.LocalizedText.Namespace">
            <summary>
            Used to distinguish texts with the same key in different contexts
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.LocalizedText.Pattern">
            <summary>
            The pattern that generates the translation for the key
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.LocalizedText.PatternDialect">
            <summary>
            The ID of the dialect of the parser for the pattern. Default is "Default"
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.LocalizedText.Source">
            <summary>
            This may be used by the text manager to provide additional information. Not required
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.LocalizedText.Quality">
            <summary>
            If the text is a place holder or the translator was unsure about its meaning this can be stated here. Default is "Proper"
            </summary>        
        </member>
        <member name="P:Umbraco.Framework.Localization.LocalizedText.Description">
            <summary>
            This may contain hints for translators
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.TextSourceInfo.TextSource">
            <summary>
            Gets or sets the text source that loaded the text.
            </summary>
            <value>
            The text source.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.TextSourceInfo.ReferenceAssembly">
            <summary>
            Gets or sets the assembly in which's context the text was loaded. 
            This is the default assembly when resolving resources and my be different than the one given by the namespace
            </summary>
            <value>
            The reference assembly.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.TextSourceInfo.Details">
            <summary>
            Gets or sets the source specific details about the text source.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="F:Umbraco.Framework.Localization.TextQuality.PlaceHolder">
            <summary>
            The text is just defined "to be there" and not considered by the text manager
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.TextQuality.Fuzzy">
            <summary>
            The text is based auto-generated based deterministic rules like machine translation
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.TextQuality.Proper">
            <summary>
            The text is a verified translation of the text for the key in the language specified
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Maintenance.AssemblySourceLoader.GetTextSource(System.Reflection.Assembly,Umbraco.Framework.Localization.TextManager,System.String)">
            <summary>
            Gets the text sources defined in the assembly specified
            </summary>
            <param name="asm">The assembly.</param>
            <param name="textManager">The text manager.</param>
            <param name="targetNamespace">The default namespace expected for the assembly when adding texts</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.Maintenance.ITextSource.Get">
            <summary>
            Gets the texts in the source
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.Maintenance.ITextSource.Put(System.Collections.Generic.IEnumerable{Umbraco.Framework.Localization.Maintenance.LocalizedTextState},Umbraco.Framework.Localization.Maintenance.TextMergeOptions)">
            <summary>
            Saves the specified texts with their state in the source with the specified merge options.
            </summary>
            <param name="texts">The texts.</param>
            <param name="options">The options.</param>
        </member>
        <member name="E:Umbraco.Framework.Localization.Maintenance.ITextSource.TextsChanged">
            <summary>
            Occurs when texts have changed
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.Maintenance.BatchUpdatableTextSource._updateScope">
            <summary>
            Supress OnTextsChanged events if this is greater than zero
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Maintenance.Extraction.TextExtractor`1">
            <summary>
            Provides a base for classes that extract texts from source files
            </summary>
            <typeparam name="TDef"></typeparam>
        </member>
        <member name="M:Umbraco.Framework.Localization.Maintenance.Extraction.TextExtractor`1.GetDefinitions(System.String)">
            <summary>
            This method must return a list of "definitions", i.e some representation of a single key and it's translations
            </summary>
            <param name="sourceText"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.Maintenance.Extraction.TextExtractor`1.GetTexts(Umbraco.Framework.Localization.Maintenance.Extraction.TextExtractor{`0}.Definition)">
            <summary>
            This method must return a list of texts based on the representation of a definition
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.Extraction.TextExtractor`1.Dupplicates">
            <summary>
            Returns the dupplicate text definitions in the source files
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.Maintenance.Extraction.TextExtractor`1.Definition.Representation">
            <summary>
            The representation, e.g. Regex Match
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.Maintenance.Extraction.TextExtractor`1.Definition.Index">
            <summary>
            Start index of the definition in the source text
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.Maintenance.Extraction.TextExtractor`1.Definition.Length">
            <summary>
            Length of the definition in the source text
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.Maintenance.Extraction.CStyleLanguageTextExtractor._stringLiteral">
            <summary>
            A string literal. C#'s @"Bla, bla, ""bla""" is also supported, and JavaScript's 'This is a string'
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.Maintenance.Extraction.CStyleLanguageTextExtractor._l10nComment">
            <summary>
            A comment that starts with @L10n
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.Maintenance.Extraction.CStyleLanguageTextExtractor._definitionMatcher">
            <summary>
            This one recognizes L10n definitions with keys (in strings) and translations (in comments).
            Currently only this simple pattern is supported: "Key" (whitespace) /* @L10n @da-DK Hej @en-UK Hello
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.Maintenance.Extraction.CStyleLanguageTextExtractor._bolMatcher">
            <summary>
            Used to remove VS's leading asterisks from multi line comments.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.Extraction.CStyleLanguageTextExtractor.MarkerLanguage">
            <summary>
            Gets or sets the language for empty /* @L10n */ markers.
            </summary>
            <value>
            The marker language.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.Extraction.CStyleLanguageTextExtractor.MarkerText">
            <summary>
            Gets or sets the marker/default text for empty /* @L10n */ markers.
            </summary>
            <value>
            The marker patern.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.Extraction.SourceFileList.ExcludePatterns">
            <summary>
            Files where the relative path starts with any of these will not be included
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Maintenance.ITextSourceHelpers.Fold(System.Collections.Generic.IEnumerable{Umbraco.Framework.Localization.LocalizedText})">
            <summary>
            Folds the texts by namespace/key/language
            </summary>
            <param name="texts"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.Maintenance.ITextSourceHelpers.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Umbraco.Framework.Localization.LocalizedText},System.Func{``0,``1})">
            <summary>
            Folds the texts by namespace/key/language using the specified transformations
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="list"></param>
            <param name="mapper"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.Localization.Maintenance.LanguageComparer">
            <summary>
            Compares two languages in a text source to see if untranslated texts exist in the source language or text with no matching keys exist in the target (e.g. because of typos in keys)
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.LanguageComparison.Success">
            <summary>
            Gets or sets a value indicating whether the two languages contains the same keys
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.LanguageComparison.MissingTexts">
            <summary>
            Source texts that doesn't exist in the target language
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.LanguageComparison.UnmatchedTexts">
            <summary>
            Texts in the target language that doesn't match source texts
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.PrioritizedTextSource.Priority">
            <summary>
            Bigger is better
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Maintenance.XmlTextSource.Monitoring``1(Umbraco.Framework.Localization.TextManager,System.String)">
            <summary>
            Creates a <see cref="T:Umbraco.Framework.Localization.Maintenance.XmlTextSource"/> that monitors the specified path for changes.
            This is not allowed in medium trust
            </summary>        
            <typeparam name="TReferenceAssembly">The default assembly used to resolve resources.</typeparam>
            <param name="manager">The manager.</param>
            <param name="path">The path.</param>        
        </member>
        <member name="M:Umbraco.Framework.Localization.Maintenance.XmlTextSource.Monitoring(System.Reflection.Assembly,Umbraco.Framework.Localization.TextManager,System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:Umbraco.Framework.Localization.Maintenance.XmlTextSource"/> that monitors the specified path for changes.
            </summary>        
            <param name="referenceAssembly">The default assembly used to resolve resources</param>
            <param name="manager">The manager.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.XmlTextSource.ReferenceAssembly">
            <summary>
            Gets or sets the reference assembly for the texts ReferenceAssembly property.
            </summary>
            <value>
            The reference assembly.
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.Maintenance.XmlTextSource.SingleLanguage">
            <summary>
            If this is the file contains a single language. This means that the Text elements contains the pattern as a string as opposed to a list of Translation elements for each language
            The language is specified on the root element
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="T:Umbraco.Framework.Localization.ParameterSet">
            <summary>
            A set of parameters used for localizing texts. Keys are case insensitive
            </summary>
        </member>
        <member name="F:Umbraco.Framework.Localization.Parsing.DefaultExpressionParser.EscapeChars">
            <summary>
            If these chars are escaped in texts they will not be misinterpreted
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Parsing.DefaultExpressionParser.Parse(System.IO.TextReader,Umbraco.Framework.Localization.TextManager)">
            <summary>
            Parses the specified pattern returned by the reader and localizes error messages with the text manager specified
            </summary>
            <param name="reader">The reader.</param>
            <param name="textManager">The text manager.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.Localization.Parsing.CustomExpressionPart">
            <summary>
            Extension point for external parsers
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Parsing.CustomExpressionPart.Decorate(Umbraco.Framework.Localization.Processing.PatternDialect,Umbraco.Framework.Localization.TextManager)">
            <summary>
            Override this method to use the build in pattern decorator
            </summary>        
        </member>
        <member name="M:Umbraco.Framework.Localization.Parsing.CustomExpressionPart.Evaluate(Umbraco.Framework.Localization.Processing.EvaluationContext,System.IO.TextWriter)">
            <summary>
            Override this method to use the build in pattern evaluator
            </summary>        
        </member>
        <member name="T:Umbraco.Framework.Localization.Parsing.HtmlPatternTransformer">
            <summary>
            Allows html tags to be used.    
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Parsing.IPatternTransformer">
            <summary>
            Implement this interface to change the default grammar's syntax.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Parsing.StringTrimmer">
            <summary>
            Trims excessive white space in text, parameters etc.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Parsing.TextParser">
            <summary>
            A very simple parser that treats the entire pattern as text
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.PatternDialect">
            <summary>
            A pattern dialect consist of a parser that understands a specific grammar and factories for value formaters, parameter evaluators and switch case evaluators when the parsed AST is decorated
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.Processing.PatternDialect.PatternTransformer">
            <summary>
            Gets or sets a pattern transformer to make simple transformations to the dialect's grammar. (See e.g. <see cref="!:HHtmlPatternTransformer"/>)
            </summary>
            <value>
            The pattern transformer.
            </value>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.IPatternProcessorFactory`2">
            <summary>
            Factory interface used by switch cases, parameter evaluators and formatters
            </summary>    
        </member>
        <member name="M:Umbraco.Framework.Localization.Processing.IPatternProcessorFactory`2.GetFor(`1,Umbraco.Framework.Localization.Processing.PatternDialect,Umbraco.Framework.Localization.TextManager)">
            <summary>
            If the pattern processor created by the factory supports the given representation it an instance is returned. Null otherwise
            </summary>
            <param name="rep"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.EvaluationContext">
            <summary>
            This class contains the language and namespace that pattern parameter evaluators etc. should evaluate against
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ISwitchConditionEvaluator">
            <summary>
            Classes implementing this interface are used to evaluate if a value matches the condition on switch cases
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Processing.ISwitchConditionEvaluator.Evaluate(Umbraco.Framework.Localization.Processing.ParameterValue,Umbraco.Framework.Localization.Processing.EvaluationContext)">
            <summary>
            Evaluates the value of the object against the condition and returns true if it matches
            </summary>
            <param name="o">The value to evaluate</param>
            <returns>true if the value matches the condition</returns>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ParameterEvaluators.PatternLookupEvaluator">
            <summary>
            Executes another pattern. Takes the format @OtherPatternKey or @OtherPatternKey(Parameter1, Parameter2, ... ParameterN)
            The specified parameters are passed on from the current parameters both with names and index. 
            The latter provides a way to reuse the same pattern even though parameter names may be different where it's called.
            In that case the pattern should only use parameter numbers as in: Special pattern says "Hello {0}"
            
            If the key of the pattern to lookup is prefixed with '@' the name of the pattern is given by a parameter. For example @@PatternName(Parameter)
            If a parameter name is quoted ("My value" or 'My value') it is considered a string literal that is passed to the referenced pattern
            Parameters can be omitted to maintain ordinal positions, e.g. @Key(P1,,P3,,,"foo")
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ParameterValue">
            <summary>
            A value for <see cref="T:Umbraco.Framework.Localization.ParameterSet"/>s. Logic can be applied after the string has been formatted in the <see cref="T:Umbraco.Framework.Localization.Processing.PatternEvaluator"/>
            </summary>    
        </member>
        <member name="M:Umbraco.Framework.Localization.Processing.ParameterValue.Wrap(System.Object)">
            <summary>
            Wraps the specified value if its not a <see cref="T:Umbraco.Framework.Localization.Processing.ParameterValue"/> already.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>        
        </member>
        <member name="P:Umbraco.Framework.Localization.Processing.ParameterValue.Value">
            <summary>
            The actual value.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.Processing.ParameterValue.DefaultFormat">
            <summary>
            Default format if nothing is specified
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ParameterValue`1">
            <summary>
            A strongly typed value for <see cref="T:Umbraco.Framework.Localization.ParameterSet"/>s. Logic can be applied after the string has been formatted in the <see cref="T:Umbraco.Framework.Localization.Processing.PatternEvaluator"/>
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ParameterValues.DelegateFormatWrapper`2">
            <summary>
            Provides a format to the value in the <see cref="T:Umbraco.Framework.Localization.Processing.PatternEvaluator"/> after the actual value has passed its <see cref="T:Umbraco.Framework.Localization.Processing.IValueFormatter"/>.
            The delegate must encode the formatted value.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.Processing.ParameterValues.DelegateFormatWrapper`2.DelegateReference">
            <summary>
            Gets or sets the object reference that will be passed to the formatting delegate.
            </summary>
            <value>
            The delegate reference.
            </value>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ParameterValues.FormatWrapper`1">
            <summary>
            Provides a format to the value in the <see cref="T:Umbraco.Framework.Localization.Processing.PatternEvaluator"/> after the actual value has passed its <see cref="T:Umbraco.Framework.Localization.Processing.IValueFormatter"/>.
            This can be used for wrapping format around values without using the format group construct.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Processing.ParameterValues.FormatWrapper`1.#ctor(`0,System.String)">
            <summary>
            Creates a new FormatWrapper for the value specified using the formatExpression
            </summary>
            <param name="value">The value.</param>
            <param name="formatExpression">The format expression. Wraps format around the value. {#} will be replaced with the actual value</param>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ParameterValues.UnencodedParameterValue">
            <summary>
            The value is written without encoding.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.PatternDecorator">
            <summary>
            Decorates the pattern parts with value formatters, switch case evaluators and parameter evaluators
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.StringBasedSwitchConditionEvaluatorFactory">
            <summary>
            Provides the basis for switch case evaluators that only supports a single text expression as conditions
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.SwitchConditions.IntervalCondition`1">
            <summary>
            An evalutator that matches against an open, closed or half open interval.
            </summary>
            <typeparam name="T">The type of the interval's limits</typeparam>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.SwitchConditions.IntervalConditionFactory">
            <summary>
            Parses intervals
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.SwitchConditions.LookupCondition">
            <summary>    
            Plural forms can be rather complex (see http://www.gnu.org/software/hello/manual/gettext/Plural-forms.html)
            This condition evaluator allows to reuse rules by giving them a label. They should be stored in the manager with the "Text" dialect
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.SwitchConditions.TakeAllCondition">
            <summary>
            This evaluator always returns true
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.SwitchConditions.SingleValueCondition`1">
            <summary>
            Matches the value against a fixed value using the type's Equals method
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.SwitchConditions.ValueListCondition`1">
            <summary>
            Matches the value against a list of values
            </summary>
            <typeparam name="TValues">The type of the list values</typeparam>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.SwitchDecorator">
            <summary>
            This class handles template switches where the conditions are looked up, e.g. #Plural(Count){Text 1 | Text other case}
            If also arranges switches such that other branches are evaluated before "true", allowing e.g. #EnumVar{0: First | , then some | -1: and last}
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ValueFormatters.RomanNumberFormatterFactory">
            <summary>
            Factory class for <see cref="T:Umbraco.Framework.Localization.Processing.ValueFormatters.RomanNumberFormatter"/>
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ValueFormatters.RomanNumberFormatter">
            <summary>
            Formats numbers as roman numbers. Numbers must be between 1 and 3999
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ValueFormatters.NumberToRomanConvertor">
            <summary>
            Thanks http://www.blackwasp.co.uk/RomanToNumber.aspx
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ValueFormatters.StringCaseFormatter">
            <summary>
            Transforms the casing of strings
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ValueFormatters.StringCaseTransformationType">
            <summary>
            The possible case transformations for <see cref="T:Umbraco.Framework.Localization.Processing.ValueFormatters.StringCaseFormatter"/>
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Processing.ValueFormatters.StringCaseFormatterFactory">
            <summary>
            Factory class for <see cref="T:Umbraco.Framework.Localization.Processing.ValueFormatters.StringCaseFormatter"/>
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.StringHelpers">
            <summary>
            Provides extension methods to localize strings
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.StringHelpers.Localize(System.String,System.Object,System.Object,System.String,Umbraco.Framework.Localization.LanguageInfo,System.String,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.String)">
            <summary>
            Localizes the string.
            If a key is specified the string the method is called on is considered the default value. Otherwise; the key
            </summary>
            <param name="s">The string with the default value.</param>
            <param name="typeRef">An object reference to a class in the namespace to get texts from.</param>
            <param name="parameters">The parameters to the text.</param>
            <param name="key">The key for text. If this is specified the string the method is called on is considered the default value. Otherwise; the key</param>
            <param name="language">The language. Default is current language</param>
            <param name="ns">The namespace. Specify to override the namespace from the type</param>
            <param name="debug">Show debug output as configured in the current text manager.</param>
            <param name="returnNullOnMissing">if set to <c>true</c> null is returned on missing texts. This has no effect if no key is specified as the string is the default text</param>
            <param name="encode">if set to <c>true</c> the text is encoded using the current text managers encoder.</param>
            <param name="fallback">A fallback value if no localized value can be found.</param>
            <returns>
            A localized text using the current text manager
            </returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.StringHelpers.Localize``1(System.String,System.Object,System.String,Umbraco.Framework.Localization.LanguageInfo,System.String,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.String)">
            <summary>
            Localizes the string.
            If a key is specified the string the method is called on is considered the default value. Otherwise; the key
            </summary>
            <typeparam name="TAssemblyRef">The type used to resolve the text namespace</typeparam>
            <param name="s">The string with the default value.</param>
            <param name="parameters">The parameters to the text.</param>
            <param name="key">The key for text. If this is specified the string the method is called on is considered the default value. Otherwise; the key</param>
            <param name="language">The language. Default is current language</param>
            <param name="ns">The namespace. Specify to override the namespace from the type</param>
            <param name="debug">Show debug output as configured in the current text manager.</param>
            <param name="returnNullOnMissing">if set to <c>true</c> null is returned on missing texts. This has no effect if no key is specified as the string is the default text</param>
            <param name="encode">if set to <c>true</c> the text is encoded using the current text managers encoder.</param>
            <param name="fallback">A fallback value if no localized value can be found.</param>
            <returns>
            A localized text using the current text manager
            </returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.StringHelpers.Localize(System.String,System.Type,System.Object,System.String,Umbraco.Framework.Localization.LanguageInfo,System.String,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.String)">
            <summary>
            Localizes the string.
            If a key is specified the string the method is called on is considered the default value. Otherwise; the key
            </summary>
            <param name="s">The string with the default value.</param>
            <param name="type">The type used to resolve the text namespace</param>
            <param name="parameters">The parameters to the text.</param>
            <param name="key">The key for text. If this is specified the string the method is called on is considered the default value. Otherwise; the key</param>
            <param name="language">The language. Default is current language</param>
            <param name="ns">The namespace. Specify to override the namespace from the type</param>
            <param name="debug">Show debug output as configured in the current text manager.</param>
            <param name="returnNullOnMissing">if set to <c>true</c> null is returned on missing texts. This has no effect if no key is specified as the string is the default text</param>
            <param name="encode">if set to <c>true</c> the text is encoded using the current text managers encoder.</param>
            <param name="fallback">A fallback value if no localized value can be found.</param>
            <returns>
            A localized text using the current text manager
            </returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.StringHelpers.Localize(System.String,System.Reflection.Assembly,System.Object,System.String,Umbraco.Framework.Localization.LanguageInfo,System.String,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.String)">
            <summary>
            Localizes the string.
            If a key is specified the string the method is called on is considered the default value. Otherwise; the key
            </summary>
            <param name="s">The string with the default value.</param>
            <param name="nsAssembly">The assembly used to resolve the text namespace</param>
            <param name="parameters">The parameters to the text.</param>
            <param name="key">The key for text. If this is specified the string the method is called on is considered the default value. Otherwise; the key</param>
            <param name="language">The language. Default is current language</param>
            <param name="ns">The namespace. Specify to override the namespace from the type</param>
            <param name="debug">Show debug output as configured in the current text manager.</param>
            <param name="returnNullOnMissing">if set to <c>true</c> null is returned on missing texts. This has no effect if no key is specified as the string is the default text</param>
            <param name="encode">if set to <c>true</c> the text is encoded using the current text managers encoder.</param>
            <param name="fallback">A fallback value if no localized value can be found.</param>
            <returns>
            A localized text using the current text manager
            </returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.Support.ObjectHelper.ParamsToParameterSet(System.Object,System.Boolean)">
            <summary>
            Converts an object to a parameter set.
            </summary>
            <param name="data">The object to convert.</param>
            <param name="addWithIndex">if set to <c>true</c> values are also added by index, e.g. new { Test = 10 } will be added both as "Test" and "0".</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Localization.Web.JavaScript.FormatGroupExpanders.HashTagFormatGroupExpanderGenerator.WriteEvaluator(Umbraco.Framework.Localization.Processing.HashTagFormatGroupExpander,Umbraco.Framework.Localization.Web.JavaScript.JavaScriptExpressionWriter,System.Action[])">
            <summary>
            Writes the javascript to evalutate the format group
            </summary>
            <param name="expander">The expander (not used).</param>
            <param name="writer">The generator to write the output to.</param>
            <param name="argumentWriters">Argument 1: Format string, Argument 2: Value to put in format string.</param>
        </member>
        <member name="T:Umbraco.Framework.Localization.Web.JavaScript.JavaScriptExpressionWriter">
            <summary>
            Writes expressions as JavaScript functions so they can be called without roundtrips to the server    
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.Web.JavaScript.JavaScriptExpressionWriter.BaseContext">
            <summary>
            Gets or sets the context that may be used by writers. It does not contain parameters.
            </summary>
            <value>
            The base context.
            </value>
        </member>
        <member name="M:Umbraco.Framework.Localization.Web.JavaScript.JavaScriptGenerator.WriteScript(Umbraco.Framework.Localization.TextManager,System.String,System.IO.TextWriter,Umbraco.Framework.Localization.LanguageInfo,System.String,System.Func{System.String,System.String,System.Boolean},System.Boolean)">
            <summary>
            Generates JavaScript functions to evaluate patterns client side
            </summary>
            <param name="manager">The text manager to extract texts from.</param>
            <param name="clientClassName">The client name of the generated object. (The script will be var clientClassName = ...)</param>
            <param name="output">The generated javascript will be written to this generator.</param>
            <param name="language">The language for the generated texts (if different from current language).</param>
            <param name="defaultNamespace">The default namespace for texts. (Set this to your assembly's namespace in plugins)</param>
            <param name="filter">Specify this to only include a subset of the TextManager's texts.</param>
            <param name="includeScriptTags">Wraps the generated script in &lt;script&gt; blocks if <c>true</c>.</param>
        </member>
        <member name="M:Umbraco.Framework.Localization.Web.JavaScript.JavaScriptHelpers.WriteScript(Umbraco.Framework.Localization.TextManager,System.String,Umbraco.Framework.Localization.LanguageInfo,System.String,System.Func{System.String,System.String,System.Boolean},System.Boolean)">
            <summary>
            Creates a JavaScript class to use the TextManager's texts client-side
            </summary>
            <param name="manager">The manager.</param>
            <param name="clientClassName">Name of the class.</param>
            <param name="language">The language for the generated texts (if different from current language).</param>
            <param name="defaultNamespace">The default namespace for texts. (Set this to your assembly's namespace in plugins)</param>
            <param name="filter">Specify this to only include a subset of the TextManager's texts.</param>
            <param name="includeScriptTags">Wraps the generated script in &lt;script&gt; blocks if <c>true</c>.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.Localization.Web.JavaScript.ValueFormatters.StringFormatGenerator">
            <summary>
            Uses MicrosoftAjaxGlobalization.js for string.Format functionality
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Web.Mvc.ExceptionHelper.GetCommonTypeName(System.Type)">
            <summary>
            Gets the name of the type like "integer", "number" "date" etc..
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Localization.Web.Mvc.LocalizationHelper.TextManager">
            <summary>
            Gets the current text manager.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Localization.Web.Mvc.LocalizedTextJavascriptResult">
            <summary>
            Generates JavaScript to use localization patterns client-side.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Localization.Web.Mvc.LocalizedTextJavascriptResult.Create``1(System.String,Umbraco.Framework.Localization.LanguageInfo,System.Func{System.String,System.Boolean},System.Func{System.String,System.String,System.Boolean},System.Boolean)">
            <summary>
            Creates an LocalizedTextJavascriptResult filtered to the texts from the specified type's assembly and default namespaces.
            </summary>        
        </member>
        <member name="P:Umbraco.Framework.Localization.Web.Mvc.LocalizedTextJavascriptResult.Gzip">
            <summary>
            Gets or sets a value indicating whether to gzip compress the script.
            </summary>        
        </member>
        <member name="T:Umbraco.Framework.Localization.Web.Mvc.LocalizingModelMetadataProvider">
            <summary>
            Localizes display names.
            If a name is specified it's considered a key
            
            If a display name is not specified for a property the following keys are considered in this order:
            - Namespace . Class name . Property name
            - Namespace part after the assembly's default namespace . Class name . Property name (e.g. the property "Name" of the class "Umbraco.Framework.Web.Models.CoreEntityModel" becomes Models.CoreEntityModel.Name)
            - Class name . Property name
            - Property name (if TestSimplePropertyName is true)
            
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Localization.Web.Mvc.LocalizingModelMetadataProvider.IgnoreMissing">
            <summary>
            Gets or sets a value indicating whether the TextManager's missing text format should be used or if the display name that could not be localized should just be used.
            You may consider this "strict mode" as it requires every property label to be localized        
            Default is <c>true</c>
            </summary>
            <value>
              <c>false</c> if TextManager's missing text format is used
            </value>
        </member>
        <member name="P:Umbraco.Framework.Localization.Web.Mvc.LocalizingModelMetadataProvider.TestSimplePropertyName">
            <summary>
            Gets or sets a value indicating whether the property name without any prefix should be tested as a key if no other localization is found. 
            As this may collide with other texts it can be disabled. It is not by default.       
            </summary>
            <value>
            	<c>true</c> if the property name without prefix is tested as key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.LocalizedString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.Equals(Umbraco.Framework.LocalizedString)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.Equals(System.String)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.GetValue(System.Globalization.CultureInfo)">
            <summary>
            Gets the value.
            </summary>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.Add(System.Globalization.CultureInfo,System.String)">
            <summary>
            Adds the specified culture.
            </summary>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.op_Implicit(System.String)~Umbraco.Framework.LocalizedString">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Umbraco.Framework.LocalizedString"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.op_Implicit(Umbraco.Framework.LocalizedString)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Umbraco.Framework.LocalizedString"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.op_Equality(Umbraco.Framework.LocalizedString,Umbraco.Framework.LocalizedString)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.op_Inequality(Umbraco.Framework.LocalizedString,Umbraco.Framework.LocalizedString)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Umbraco.Framework.LocalizedString.op_Addition(Umbraco.Framework.LocalizedString,Umbraco.Framework.LocalizedString)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Umbraco.Framework.LocalizedString.DefaultCulture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:Umbraco.Framework.LocalizedString.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Umbraco.Framework.Mandate">
            <summary>
            Helper class for mandating values, for example on method parameters.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Mandate.ParameterNotNull``1(``0,System.String)">
            <summary>
            Mandates that the specified parameter is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Framework.Mandate.ParameterNotEmpty(Umbraco.Framework.HiveId,System.String)">
            <summary>
            Mandates that the specified parameter is not empty.
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Mandate.ParameterNotEmpty(Umbraco.Framework.HiveIdValue,System.String)">
            <summary>
            Mandates that the specified parameter is not empty
            </summary>
            <param name="value"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:Umbraco.Framework.Mandate.ParameterNotNullOrEmpty(System.String,System.String)">
            <summary>
            Mandates that the specified parameter is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null or whitespace.</exception>
        </member>
        <member name="M:Umbraco.Framework.Mandate.ParameterNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Mandates that the specified sequence is not null and has at least one element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="paramName">Name of the param.</param>
        </member>
        <member name="M:Umbraco.Framework.Mandate.ParameterCondition(System.Boolean,System.String)">
            <summary>
            Mandates that the specified parameter matches the condition.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentException">If the condition is false.</exception>
        </member>
        <member name="M:Umbraco.Framework.Mandate.That``1(System.Boolean)">
            <summary>
            Mandates that the specified condition is true, otherwise throws an exception specified in <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="condition">if set to <c>true</c>, throws exception <typeparamref name="TException"/>.</param>
            <exception cref="T:System.Exception">An exception of type <typeparamref name="TException"/> is raised if the condition is false.</exception>
        </member>
        <member name="M:Umbraco.Framework.Mandate.That``1(System.Boolean,System.Func{Umbraco.Framework.Localization.TextManager,``0})">
            <summary>
            Mandates that the specified condition is true, otherwise throws an exception specified in <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="condition">if set to <c>true</c>, throws exception <typeparamref name="TException"/>.</param>
            <param name="defer">Deffered expression to call if the exception should be raised.</param>
            <exception cref="T:System.Exception">An exception of type <typeparamref name="TException"/> is raised if the condition is false.</exception>
        </member>
        <member name="T:Umbraco.Framework.MemberInfoAttribute">
            <summary>
            </summary>
        </member>
        <member name="T:Umbraco.Framework.MetadataComposition">
            <summary>
            A base class for all meta data classes for use with MEF must derive from.
            </summary>
            <remarks>
            This is required for medium trust support and MEF, medium trust doesn't like when interfaces are used for metadata because
            of the dynamic classes it tries to create at runtime.
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.MetadataComposition.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            constructor, sets all properties of this object based on the dictionary values
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.SafeCast``1(System.Object)">
            <summary>
            Provides a shortcut way of safely casting an input when you cannot guarantee the <typeparam name="T"></typeparam> is an instance type (i.e., when the C# AS keyword is not applicable)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.TryConvertTo``1(System.Object)">
            <summary>
            Tries to convert the input object to the output type using TypeConverters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.TryConvertTo(System.Object,System.Type)">
            <summary>
            Tries to convert the input object to the output type using TypeConverters. If the destination type is a superclass of the input type,
            if will use <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/>.
            </summary>
            <param name="input">The input.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
            <remarks>DOES NOT work in Medium Trust owing to the use of <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>. Use <see cref="M:Umbraco.Framework.ObjectExtensions.DeepCopy``1(``0,System.Nullable{System.Boolean})"/> for cloning objects (excluding private members) in medium trust.</remarks>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.DeepCopy``1(``0,System.Nullable{System.Boolean})">
            <summary>
            Copies an entire object graph, with a factory for instantiating the initial copy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="hideErrorsInPartialTrust">Hides errors in partial trust by leaving fields / properties as their defaults when getting or setting is not possible.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.DeepCopy``1(``0,System.Func{``0},System.Nullable{System.Boolean})">
            <summary>
            Copies an entire object graph, with a factory for instantiating the initial copy. Useful when <typeparamref name="T"/> does not have a default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="factory">The factory.</param>
            <param name="hideErrorsInPartialTrust">Hides errors in partial trust by leaving fields / properties as their defaults when getting or setting is not possible.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.CreateObject(System.Type)">
            <summary>
            A cached wrapper for <see cref="M:Umbraco.Framework.ObjectExtensions.GetObjectFactory(System.Type)"/>.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.GetObjectFactory(System.Type)">
            <summary>
            Creates an object matching the type <paramref name="type"/>. A search is made for constructors that have zero parameters. If the current <see cref="T:System.AppDomain"/>
            is not fully trusted, it will exclude matching constructors that are SecurityCritical or SecuritySafeCritical.
            If none is found, but the <see cref="T:System.AppDomain"/> is fully trusted, <see cref="M:System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)"/> is used to instantiate an object
            without a constructor. 
            If in partial trust, the next visible constructor is used having the least parameters for which default values can be passed in.
            Finally, if none is found, an exception is thrown.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.DeepCopy(System.Object,System.Type,System.Func{System.Object},System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Copies an object graph.
            </summary>
            <param name="source">The source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="factory">The factory.</param>
            <param name="recurseCount">The recurse count.</param>
            <param name="hideErrorsInPartialTrust">The hide errors in partial trust.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.SetValue(System.Reflection.MemberInfo,System.Type,System.Object,System.Object,System.Action{System.Object,System.Object},System.Int32)">
            <summary>
            Sets a value on a member of an instance <paramref name="target"/> of type <paramref name="sourceType"/>.
            </summary>
            <param name="member">The member.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="target">The target.</param>
            <param name="sourceValue">The source value.</param>
            <param name="setter">The setter.</param>
            <param name="outerLoopRecurseCount">The outer loop recursion count.</param>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.ToJsonString(System.Object)">
            <summary>
            Convert an object to a JSON string with camelCase formatting
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.ToJsonString(System.Object,Umbraco.Framework.PropertyNamesCaseType)">
            <summary>
            Convert an object to a JSON string with the specified formatting
            </summary>
            <param name="obj">The obj.</param>
            <param name="propertyNamesCaseType">Type of the property names case.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.ToDictionary``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Converts an object into a dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TVal"> </typeparam>
            <param name="o"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.ObjectExtensions.ToDictionary``1(System.Object,System.String[])">
            <summary>
            Turns object into dictionary
            </summary>
            <param name="o"></param>
            <param name="ignoreProperties">Properties to ignore</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.AttemptTuple`1">
            <summary>
            Represents the result of an operation attempt
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
        </member>
        <member name="F:Umbraco.Framework.AttemptTuple`1.False">
            <summary>
            Represents an unsuccessful parse operation
            </summary>
        </member>
        <member name="M:Umbraco.Framework.AttemptTuple`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.AttemptTuple`1"/> struct.
            </summary>
            <param name="success">If set to <c>true</c> this tuple represents a successful parse result.</param>
            <param name="result">The parse result.</param>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.AttemptTuple`1.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Umbraco.Framework.AttemptTuple`1"/> represents a successful operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.AttemptTuple`1.Error">
            <summary>
            Gets the error associated with an unsuccessful attempt.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Umbraco.Framework.AttemptTuple`1.Result">
            <summary>
            Gets the parse result.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.DemandsDependenciesAttribute">
            <summary>
            Used to identify that a type demands dependencies
            </summary>
        </member>
        <member name="M:Umbraco.Framework.DemandsDependenciesAttribute.#ctor(System.Type)">
            <summary>
            Used to identify that a class requires an <see cref="T:Umbraco.Framework.DependencyManagement.IDependencyDemandBuilder"/> to be invoked when it is instantiated from configuration
            </summary>
            <param name="demandBuilderType">Type of the demand builder.</param>
        </member>
        <member name="M:Umbraco.Framework.StringCastableEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Umbraco.Framework.StringCastableEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Umbraco.Framework.EntityPath.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Umbraco.Framework.HiveId"/> with the specified level. Not that this is not 0-indexed. This indexer is intended
            to be passed a <see cref="P:Umbraco.Framework.EntityPath.Level"/> where 0 is typically the Content root
            </summary>
            <value></value>
        </member>
        <member name="P:Umbraco.Framework.EntityPath.Item(System.Int32,System.Boolean)">
            <summary>
            Gets the <see cref="T:Umbraco.Framework.HiveId"/> with the specified level. Not that this is not 0-indexed. This indexer is intended
            to be passed a <see cref="P:Umbraco.Framework.EntityPath.Level"/> where 0 is typically the Content root
            </summary>
            <value></value>
        </member>
        <member name="P:Umbraco.Framework.EntityPath.Level">
            <summary>
            Gets the "level" of the item that this <see cref="T:Umbraco.Framework.EntityPath"/> represents in a hierarchy.
            This is a shortcut to NaturalPath.Count, excluding any <see cref="T:Umbraco.Framework.HiveId"/> that are marked "system" ids.
            For example, the default Content Root would return 0 because it's a system id. The first child of the content root, e.g.
            Homepage, would return 1, etc.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Umbraco.Framework.EntityPath.NaturalPath">
            <summary>
            Gets the "natural" path, i.e. the list of <see cref="T:Umbraco.Framework.HiveId"/> from the last system id up until the end of this collection.
            <see cref="P:Umbraco.Framework.EntityPath.TruePath"/> is stripped of all but the last system id (e.g. to exclude the system root, but include the content root)
            and the result is returned.
            For example, the natural path of a typical homepage would include the content root and the homepage, but not include the system root.
            </summary>
            <value>The natural path.</value>
        </member>
        <member name="P:Umbraco.Framework.EntityPath.TruePath">
            <summary>
            A representation of the true Hive path without filtering any ancestors.
            </summary>
            <value>The true path.</value>
        </member>
        <member name="P:Umbraco.Framework.EntityPath.TrueLevel">
            <summary>
            Similar to <see cref="P:Umbraco.Framework.EntityPath.Level"/> but without excluding any system ids at all. Equivalent to TruePath.Count.
            </summary>
            <value>The true level.</value>
        </member>
        <member name="T:Umbraco.Framework.ProviderSetupModuleAttribute">
            <summary>
            Identifies a class as being the default IoC dependency builder for a provider
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.ProviderSupport.AbstractProviderConfigurationSection">
            <summary>
             Abstract configuration section to for provider sections
            </summary>
        </member>
        <member name="T:Umbraco.Framework.ProviderSupport.InstallStatus">
            <summary>
            Describes the install status of a provider
            </summary>
        </member>
        <member name="F:Umbraco.Framework.ProviderSupport.InstallStatus._statusType">
            <summary>
            By default RequiresConfiguration is the first stage of insall
            </summary>
        </member>
        <member name="M:Umbraco.Framework.ProviderSupport.InstallStatus.#ctor(Umbraco.Framework.ProviderSupport.InstallStatusType,System.Collections.Generic.IEnumerable{Umbraco.Framework.Tasks.ProviderInstallTask},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.ProviderSupport.InstallStatus.#ctor(Umbraco.Framework.ProviderSupport.InstallStatusType,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.ProviderSupport.InstallStatus.StatusType">
            <summary>
            Gets or sets the install status.
            </summary>
            <value>The type of the status.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.ProviderSupport.InstallStatus.TasksToRun">
            <summary>
            Gets or sets the tasks to run.
            </summary>
            <value>The tasks to run.</value>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.ProviderSupport.InstallStatusType">
            <summary>
            Represents the different stages of installation
            </summary>
        </member>
        <member name="F:Umbraco.Framework.ProviderSupport.InstallStatusType.Completed">
            <summary>
            Installation has completed
            </summary>
        </member>
        <member name="F:Umbraco.Framework.ProviderSupport.InstallStatusType.Pending">
            <summary>
            Application is awaiting being told to install, configuration is ready
            </summary>
        </member>
        <member name="F:Umbraco.Framework.ProviderSupport.InstallStatusType.RequiresConfiguration">
            <summary>
            To proceed, the application requires some configuration
            </summary>
        </member>
        <member name="F:Umbraco.Framework.ProviderSupport.InstallStatusType.TriedAndFailed">
            <summary>
            Installation was attempted but failed
            </summary>
        </member>
        <member name="T:Umbraco.Framework.ReadOnlyDictionary`2">
            <summary>
            Provides the base class for a generic read-only dictionary.
            </summary>
            <typeparam name="TKey">
            The type of keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the dictionary.
            </typeparam>
            <remarks>
            <para>
            An instance of the <b>ReadOnlyDictionary</b> generic class is
            always read-only. A dictionary that is read-only is simply a
            dictionary with a wrapper that prevents modifying the
            dictionary; therefore, if changes are made to the underlying
            dictionary, the read-only dictionary reflects those changes. 
            See <see cref="T:System.Collections.Generic.Dictionary`2"/> for a modifiable version of 
            this class.
            </para>
            <para>
            <b>Notes to Implementers</b> This base class is provided to 
            make it easier for implementers to create a generic read-only
            custom dictionary. Implementers are encouraged to extend this
            base class instead of creating their own. 
            </para>
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:ReadOnlyDictionary`2" /> class that wraps
            the supplied <paramref name="dictionaryToWrap"/>.
            </summary>
            <param name="dictionaryToWrap">The <see cref="T:IDictionary`2" />
            that will be wrapped.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the dictionary is null.
            </exception>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>This method is not supported by the 
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
            <param name="key">
            The object to use as the key of the element to add.</param>
            <param name="value">
            The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:ReadOnlyDictionary`2" />
            contains the specified key.</summary>
            <returns>
            True if the <see cref="T:ReadOnlyDictionary`2" /> contains
            an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the
            <see cref="T:ReadOnlyDictionary`2"></see>.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the key is null.
            </exception>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>
            This method is not supported by the <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            True if the element is successfully removed; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value
            associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>
            <b>true</b> if the <see cref="T:ReadOnlyDictionary`2" /> contains
            an element with the specified key; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>This method is not supported by the
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
            <param name="item">
            The object to add to the <see cref="T:ICollection`1"/>.
            </param>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
            <summary>This method is not supported by the 
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:ICollection`1"/> contains a
            specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:ICollection`1"/>.
            </param>
            <returns>
            <b>true</b> if item is found in the <b>ICollection</b>; 
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a
            particular Array index. 
            </summary>
            <param name="array">The one-dimensional Array that is the
            destination of the elements copied from ICollection.
            The Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>This method is not supported by the
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>
            <param name="item">
            The object to remove from the ICollection.
            </param>
            <returns>Will never return a value.</returns>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>. 
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements copied from 
            ICollection. The Array must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in Array at which copying begins.
            </param>
        </member>
        <member name="P:Umbraco.Framework.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the
            <see cref="T:ReadOnlyDictionary`2"></see>.
            </summary>
            <value>The number of key/value pairs.</value>
            <returns>The number of key/value pairs contained in the
            <see cref="T:ReadOnlyDictionary`2"></see>.</returns>
        </member>
        <member name="P:Umbraco.Framework.ReadOnlyDictionary`2.Keys">
            <summary>Gets a collection containing the keys in the
            <see cref="T:ReadOnlyDictionary{TKey,TValue}"></see>.</summary>
            <value>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/> 
            containing the keys.</value>
            <returns>A
            <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>
            containing the keys in the
            <see cref="T:System.Collections.Generic.Dictionary`2"></see>.
            </returns>
        </member>
        <member name="P:Umbraco.Framework.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection containing the values of the
            <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>
            <value>The collection of values.</value>
        </member>
        <member name="P:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>Gets a value indicating whether the dictionary is read-only.
            This value will always be true.</summary>
        </member>
        <member name="P:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the dictionary
            is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Umbraco.Framework.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to dictionary.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <returns>
            The value associated with the specified key. If the specified key
            is not found, a get operation throws a 
            <see cref="T:System.Collections.Generic.KeyNotFoundException" />,
            and a set operation creates a new element with the specified key.
            </returns>
            <param name="key">The key of the value to get or set.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the key is null.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and key does not exist in the collection.
            </exception>
        </member>
        <member name="M:Umbraco.Framework.RevisionStatusType.#ctor(Umbraco.Framework.HiveId,System.String,Umbraco.Framework.LocalizedString,System.Boolean,Umbraco.Framework.RevisionStatusType[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.RevisionStatusType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.RevisionStatusType.GetMembersForEqualityComparison">
            <summary>
            Gets the natural id members.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.RevisionStatusType.Alias">
            <summary>
            Gets or sets the alias of the object. The alias is a string to which this object
            can be referred programmatically, and is often a normalised version of the <see cref="P:Umbraco.Framework.IReferenceByName.Name"/> property.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Umbraco.Framework.RevisionStatusType.Name">
            <summary>
            Gets or sets the name of the object. The name is a string intended to be human-readable, and
            is often a more descriptive version of the <see cref="!:IReferenceByName.Alias"/> property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Umbraco.Framework.RevisionStatusType.IsSystem">
            <summary>
            Gets or sets a value indicating whether this instance is a built-in system value.
            </summary>
            <value><c>true</c> if this instance is system; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Will ensure that all bytes are read from the stream regardless of where it's coming from, this will NOT close the stream, the caller must do that
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            See: http://stackoverflow.com/questions/221925/creating-a-byte-array-from-a-stream
            </remarks>
        </member>
        <member name="T:Umbraco.Framework.StringExtensions">
            <summary>
             String extension methods
            </summary>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.Trim(System.String,System.String)">
            <summary>
            Trims the specified value from a string; accepts a string input whereas the in-built implementation only accepts char or char[].
            </summary>
            <param name="value">The value.</param>
            <param name="forRemoving">For removing.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>Is null or white space.</summary>
            <param name="str">The str.</param>
            <returns>The is null or white space.</returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.ToDelimitedList(System.String,System.String)">
            <summary>The to delimited list.</summary>
            <param name="list">The list.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>the list</returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.EnumTryParse``1(System.String,System.Boolean,``0@)">
            <summary>enum try parse.</summary>
            <param name="strType">The str type.</param>
            <param name="ignoreCase">The ignore case.</param>
            <param name="result">The result.</param>
            <typeparam name="T">The type</typeparam>
            <returns>The enum try parse.</returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.StripHtml(System.String)">
            <summary>
            Strips all html from a string.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns the string without any html tags.</returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.ToUrlAlias(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts string to a URL alias.
            </summary>
            <param name="value">The value.</param>
            <param name="charReplacements">The char replacements.</param>
            <param name="replaceDoubleDashes">if set to <c>true</c> replace double dashes.</param>
            <param name="stripNonAscii">if set to <c>true</c> strip non ASCII.</param>
            <param name="urlEncode">if set to <c>true</c> URL encode.</param>
            <returns></returns>
            <remarks>
            This ensures that ONLY ascii chars are allowed and of those ascii chars, only digits and lowercase chars, all
            punctuation, etc... are stripped out, however this method allows you to pass in string's to replace with the
            specified replacement character before the string is converted to ascii and it has invalid characters stripped out.
            This allows you to replace strings like &amp; , etc.. with your replacement character before the automatic
            reduction.
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.ToUmbracoAlias(System.String,Umbraco.Framework.StringAliasCaseType,System.Boolean)">
            <summary>
            Converts a string for use with an entity alias which is camel case and without invalid characters
            </summary>
            <param name="phrase">The phrase.</param>
            <param name="caseType">By default this is camel case</param>
            <param name="removeSpaces">if set to <c>true</c> [remove spaces].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.ConvertCase(System.String,Umbraco.Framework.StringAliasCaseType)">
            <summary>
            Converts the phrase to specified convention.
            </summary>
            <param name="phrase"></param>
            <param name="cases">The cases.</param>
            <returns>string</returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.EncodeAsGuid(System.String)">
            <summary>
            Encodes as GUID.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.ConvertToHex(System.String)">
            <summary>
            Converts to hex.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.ToUrlBase64(System.String)">
            <summary>
             Encodes a string to a safe URL base64 string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.FromUrlBase64(System.String)">
            <summary>
            Decodes a URL safe base64 string back
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.InvariantFormat(System.String,System.Object[])">
            <summary>
            formats the string with invariant culture
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.InvariantEquals(System.String,System.String)">
            <summary>
            Compares 2 strings with invariant culture and case ignored
            </summary>
            <param name="compare">The compare.</param>
            <param name="compareTo">The compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.IsGuid(System.String,System.Boolean)">
            <summary>
            Determines if the string is a Guid
            </summary>
            <param name="str"></param>
            <param name="withHyphens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.ParseInto``1(System.String)">
            <summary>
            Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.ParseInto(System.String,System.Type)">
            <summary>
            Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <param name="val"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.ToMd5(System.String)">
            <summary>
            Converts the string to MD5
            </summary>
            <param name="stringToConvert">referrs to itself</param>
            <returns>the md5 hashed string</returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.UrlTokenDecode(System.String)">
            <summary>
            Decodes a string that was encoded with UrlTokenEncode
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.UrlTokenEncode(System.Byte[])">
            <summary>
            Encodes a string so that it is 'safe' for URLs, files, etc..
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.NormaliseDirectoryPath(System.String)">
            <summary>
            Ensures that the folder path endds with a DirectorySeperatorChar
            </summary>
            <param name="currentFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.DeserializeJson(System.String)">
            <summary>
            Deserializes the json.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.DeserializeJson``1(System.String)">
            <summary>
            Deserializes the json.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.DecodeMacroParameters(System.String)">
            <summary>
            Decodes the macro parameters.
            </summary>
            <param name="macroParameters">The macro parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates the specified text string.
            </summary>
            <param name="text">The text.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.StringExtensions.StripNewLines(System.String)">
            <summary>
            Strips carrage returns and line feeds from the specified text.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.TaskTriggers">
            <summary>
            A helper class listing common constant trigger aliases
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TaskTriggers.SafeTriggerName``1(System.String)">
            <summary>
            Produces a trigger name prefixed with the name of type <typeparamref name="T"/>, useful
            for callers who want to register or execute a trigger name specific to their type or namespace region.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="triggerName">Name of the trigger.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Tasks.DelegateTask">
            <summary>
            Represents a declarative task that runs a provided delegate when told to execute
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Tasks.AbstractTask">
            <summary>
            Represents a task that can be executed
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Tasks.AbstractTask.Execute(Umbraco.Framework.Tasks.TaskExecutionContext)">
            <summary>
            Executes this task instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Tasks.AbstractTask.Context">
            <summary>
            Gets a reference to the <see cref="T:Umbraco.Framework.Context.IFrameworkContext"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Tasks.DelegateTask.#ctor(System.Action{Umbraco.Framework.Tasks.TaskExecutionContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Tasks.DelegateTask"/> class. Note that since this constructor has
            no <see cref="T:Umbraco.Framework.Context.IFrameworkContext"/> parameter, the <see cref="N:Umbraco.Framework.Context"/> property of the base class
            <see cref="T:Umbraco.Framework.Tasks.AbstractTask"/> will be null until the <see cref="M:Umbraco.Framework.Tasks.DelegateTask.Execute(Umbraco.Framework.Tasks.TaskExecutionContext)"/> method is called at which point
            the <see cref="!:TaskExecutionContext.EventArgs.FrameworkContext"/> property will be used to set it.
            </summary>
            <param name="callback">The callback.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Tasks.DelegateTask.#ctor(Umbraco.Framework.Context.IFrameworkContext,System.Action{Umbraco.Framework.Tasks.TaskExecutionContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Tasks.DelegateTask"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="callback">The callback.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Tasks.DelegateTask.Execute(Umbraco.Framework.Tasks.TaskExecutionContext)">
            <summary>
            Executes this task instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Tasks.ProviderInstallTask">
            <summary>
            Abstract task for defining an installation task
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ProviderInstallTask.GetInstalledVersion">
            <summary>
            Returns the currently installed version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ProviderInstallTask.InstallOrUpgrade">
            <summary>
            Performs the install or upgrade
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ProviderInstallTask.Execute(Umbraco.Framework.Tasks.TaskExecutionContext)">
            <summary>
            Executes this task instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Tasks.ProviderInstallTask.NeedsInstallOrUpgrade">
            <summary>
            Returns true if installation is required or false if it is already installed
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Tasks.ProviderInstallTask.Ordinal">
            <summary>
            Gets or sets the ordinal which can be used to infer the running order when this task is in a collection.
            </summary>
            <value>The ordinal.</value>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.Tasks.TaskEventArgs">
            <summary>
            Contains task event data and an <see cref="T:Umbraco.Framework.Context.IFrameworkContext"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Tasks.TaskEventArgs.#ctor(Umbraco.Framework.Context.IFrameworkContext,System.EventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:System.EventArgs"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskEventArgs.FrameworkContext">
            <summary>
            Gets or sets the framework context.
            </summary>
            <value>The framework context.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskEventArgs.CallerEventArgs">
            <summary>
            Gets or sets the caller event args.
            </summary>
            <value>The caller event args.</value>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.ThreadStaticScopedCache.InvalidateItems(System.String)">
            <summary>
            Removes any item from the cache that match the regex pattern
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="T:Umbraco.Framework.Data.Common.BasicConcurrencyToken">
            <summary>
            Represents a basic concurrency token using a serialised datestamp
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Data.Common.IConcurrencyToken">
            <summary>
            Defines mechanisms necessary for tracking whether an object has changed
            between tiers
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Data.Common.IConcurrencyToken.ConcurrencyToken">
            <summary>
              Gets or sets the concurrency token.
            </summary>
            <value>The concurrency token.</value>
        </member>
        <member name="M:Umbraco.Framework.Data.Common.BasicConcurrencyToken.FromTimeSpan(System.TimeSpan)">
            <summary>
            Generates a new <see cref="T:Umbraco.Framework.Data.Common.BasicConcurrencyToken"/> from a <see cref="T:System.TimeSpan"/>
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.Data.Common.BasicConcurrencyToken.ConcurrencyToken">
            <summary>
              Gets or sets the concurrency token.
            </summary>
            <value>The concurrency token.</value>
        </member>
        <member name="T:Umbraco.Framework.DependencyManagement.IContainerBuilder">
            <summary>When implemented in a derived class, provides for registering services with a specific dependency management container.</summary>
            <remarks>Doc updated, 14-Jan-2011.</remarks>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IContainerBuilder.Reset">
            <summary>Resets the container builder in order to start building from scratch.</summary>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IContainerBuilder.Build">
            <summary>Instructs the container to build its dependency map.</summary>
            <returns>An <see cref="T:Umbraco.Framework.DependencyManagement.IDependencyResolver"/> which may be used for resolving services.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IContainerBuilder.AddDependencyDemandBuilder(Umbraco.Framework.DependencyManagement.IDependencyDemandBuilder)">
            <summary>Adds a dependency demand builder to the container and instructs it to register its dependencies.</summary>
            <param name="demandBuilder">The demand builder.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IContainerBuilder.AddDemandsFromAssemblyOf``1">
            <summary>Adds dependency demand builders from the assembly containing <typeparamref name="T"/>.</summary>
            <typeparam name="T">Type from which to infer assembly.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IContainerBuilder.AddDemandsFromAssemblyOf(System.Type)">
            <summary>Add dependency demand builders from the assembly of the given type. </summary>
            <param name="type">Type from which to infer assembly.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.AbstractContainerBuilder.AddDependencyDemandBuilder(Umbraco.Framework.DependencyManagement.IDependencyDemandBuilder)">
            <summary>Adds a dependency demand builder to the container and instructs it to register its dependencies.</summary>
            <param name="demandBuilder">The demand builder.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.AbstractContainerBuilder.AddDemandsFromAssemblyOf``1">
            <summary>Adds dependency demand builders from the assembly containing <typeparamref name="T"/>.</summary>
            <typeparam name="T">Type from which to infer assembly.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.AbstractContainerBuilder.AddDemandsFromAssemblyOf(System.Type)">
            <summary>Add dependency demand builders from the assembly of the given type.</summary>
            <param name="exampleType">Type from which to infer assembly.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.AbstractContainerBuilder.Reset">
            <summary>Resets the container builder in order to start building from scratch.</summary>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.AbstractContainerBuilder.Build">
            <summary>Instructs the container to build its dependency map.</summary>
            <returns>An <see cref="T:Umbraco.Framework.DependencyManagement.IDependencyResolver"/> which may be used for resolving services.</returns>
        </member>
        <member name="T:Umbraco.Framework.DependencyManagement.AbstractDependencyResolver">
            <summary>
             All dependency resolvers should inherit from this which ensures the correct constructor
            </summary>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IInstanceRegistrarModifier`1.ScopedAsSingleton">
            <summary>Marks the registration as having a singleton scope.</summary>
            <returns>Itself</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IInstanceRegistrarModifier`1.ScopedWithNestedLifetime">
            <summary>Marks the registration as having a scope which lasts for the lifetime of its parent. </summary>
            <returns>Itself</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IInstanceRegistrarModifier`1.ScopedPerHttpRequest">
            <summary>Marks the registration as having a singleton scope for the lifetime of a http request.</summary>
            <value>The per request scoped.</value>
            TODO: Put this in a separate assembly as an extension method? Not all providers in all scenarios may support a dependency on System.Web (APN)
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IInstanceRegistrarModifier`1.ExternallyOwned">
            <summary>Marks the registration as having a lifetime which is the responsibility of an external system. The container will not manage disposal of this service.</summary>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IInstanceRegistrarModifier`1.WithMetadata``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Associates the registration with metadata, which will be made available to the service on resolution.
            </summary>
            <typeparam name="TMetadata">The <typeparamref name="TMetadata"/> type used for the metadata.</typeparam>
            <typeparam name="TProperty">The <typeparamref name="TProperty"/> type used for the property.</typeparam>
            <param name="propertyAccessor">The property accessor.</param>
            <param name="value">The value.</param>
            <returns>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IInstanceRegistrarModifier`1.AfterActivate(System.Action{Umbraco.Framework.DependencyManagement.IResolutionContext,`0})">
            <summary>
            Specifies a delegate to be called after the component has been activated.
            </summary>
            <param name="callback">The callback.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1">
            <summary>Interface a dependency registrar modifier whose implementation types are specified at runtime.</summary>
            <remarks>Doc updated, 23-Jan-2011.</remarks>
            <typeparam name="TContract">The <typeparamref name="TContract" /> type used for the type-binding contracts.</typeparam>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithTypedParam``1(System.Object)">
            <summary>Marks the registration as having a specific constructor parameter discovered by type.</summary>
            <typeparam name="T">The type of the constructor parameter.</typeparam>
            <param name="value">The value of the parameter.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithTypedParam(System.Type,System.Object)">
            <summary>Marks the registration as having a specific constructor parameter discovered by type.</summary>
            <param name="paramType">The type of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithNamedParam(System.String,System.Object)">
            <summary>Marks the registration as having a specific constructor parameter discovered by name. </summary>
            <param name="name">The name of the constructor parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithResolvedParam``1">
            <summary>Marks the registration as having a specific constructor parameter discovered by type, whose value is resolved by the container. </summary>
            <typeparam name="T">The type of the service to resolve in order to pass in as the value of the parameter.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithResolvedParam``1(System.String)">
            <summary>Marks the registration as having a specific constructor parameter discovered by type, whose value is resolved by the container (when given the name of the service). </summary>
            <typeparam name="T">The type of the service to resolve in order to pass in as the value of the parameter.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithResolvedParam``1(System.Func{Umbraco.Framework.DependencyManagement.IResolutionContext,``0})">
            <summary>Marks the registration as having a specific constructor parameter discovered by type, whose value is resolved by a callback. </summary>
            <typeparam name="T">The type of the service to resolve in order to pass in as the value of the parameter.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithNamedResolvedParam``1(System.String,System.Func{Umbraco.Framework.DependencyManagement.IResolutionContext,``0})">
            <summary>Marks the registration as having a specific constructor parameter discovered by name, whose value is resolved by a callback. </summary>
            <typeparam name="T">The type of the service to resolve in order to pass in as the value of the parameter.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithResolvedParam(System.Type)">
            <summary>Marks the registration as having a specific constructor parameter discovered by type, whose value is resolved by the container. </summary>
            <param name="paramType">The type of the parameter.</param> 
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithResolvedParam(System.Type,System.String)">
            <summary>Marks the registration as having a specific constructor parameter discovered by type, whose value is resolved by the container (when given the name of the service).</summary>
            <param name="paramType">The type of the parameter.</param>
            <param name="serviceName">Name of the service.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithResolvedParam(System.Type,System.Func{Umbraco.Framework.DependencyManagement.IResolutionContext,System.Object})">
            <summary>Marks the registration as having a specific constructor parameter discovered by type, whose value is resolved by a callback.</summary>
            <param name="paramType">The type of the parameter.</param>
            <param name="callback">The callback.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithNamedResolvedParam(System.Type,System.String,System.Func{Umbraco.Framework.DependencyManagement.IResolutionContext,System.Object})">
            <summary>Marks the registration as having a specific constructor parameter discovered by name, whose value is resolved by a callback.</summary>
            <param name="paramType">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="callback">The callback.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithProperty(System.String,System.Object)">
            <summary>Marks the registration as having a specific property value to be injected, discovered by name. </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value to be injected.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IRuntimeTypeRegistrarModifier`1.WithMetadata(System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>Associates the registration with metadata, which will be made available to the service on resolution.</summary>
            <param name="metadata">The metadata.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrar`2.Register">
            <summary>Registers a service with the container.</summary>
            <typeparam name="TContract">The <typeparamref name="TContract" /> type used for the contract.</typeparam>
            <typeparam name="TImplementation">The <typeparamref name="TImplementation" /> type used for the implementation.</typeparam>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrar`2.Register(System.String)">
            <summary>Registers a service with the container.</summary>
            <typeparam name="TContract">The <typeparamref name="TContract" /> type used for the contract.</typeparam>
            <typeparam name="TImplementation">The <typeparamref name="TImplementation" /> type used for the implementation.</typeparam>
            <param name="name">The name of the service.</param>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrar`2.RegisterFactory(System.Func{Umbraco.Framework.DependencyManagement.IResolutionContext,`1})">
            <summary>Registers a service with the container, providing a delegate for instantiation.</summary>
            <typeparam name="TContract">The <typeparamref name="TContract" /> type used for the contract.</typeparam>
            <typeparam name="TImplementation">The <typeparamref name="TImplementation" /> type used for the implementation.</typeparam>
            <param name="delegate">The delegate used for instantiating services.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrar`2.RegisterFactory(System.String,System.Func{Umbraco.Framework.DependencyManagement.IResolutionContext,`1})">
            <summary>Registers a named service with the container, providing a delegate for instantiation.</summary>
            <param name="serviceName">The name of the service.</param>
            <param name="delegate">The delegate used for instantiating services.</param>
        </member>
        <member name="T:Umbraco.Framework.DependencyManagement.IServiceRegistrarModifier`2">
            <summary>Interface for extending options when registering a service via a <see cref="T:Umbraco.Framework.DependencyManagement.IContainerBuilder"/>.</summary>
            <remarks>Doc updated, 14-Jan-2011.</remarks>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrarModifier`2.WithTypedParam``1(System.Object)">
            <summary>Marks the registration as having a specific constructor parameter discovered by type.</summary>
            <typeparam name="T">The type of the constructor parameter.</typeparam>
            <param name="value">The value of the parameter.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrarModifier`2.WithNamedParam(System.String,System.Object)">
            <summary>Marks the registration as having a specific constructor parameter discovered by name. </summary>
            <param name="name">The name of the constructor parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrarModifier`2.WithResolvedParam``1">
            <summary>Marks the registration as having a specific constructor parameter discovered by type, whose value is resolved by the container. </summary>
            <typeparam name="T">The type of the service to resolve in order to pass in as the value of the parameter.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrarModifier`2.WithResolvedParam``1(System.String)">
            <summary>Marks the registration as having a specific constructor parameter discovered by type, whose value is resolved by the container (when given the name of the service). </summary>
            <typeparam name="T">The type of the service to resolve in order to pass in as the value of the parameter.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrarModifier`2.WithResolvedParam``1(System.Func{Umbraco.Framework.DependencyManagement.IResolutionContext,``0})">
            <summary>Marks the registration as having a specific constructor parameter discovered by type, whose value is resolved by a callback. </summary>
            <typeparam name="T">The type of the service to resolve in order to pass in as the value of the parameter.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrarModifier`2.WithNamedResolvedParam``1(System.String,System.Func{Umbraco.Framework.DependencyManagement.IResolutionContext,``0})">
            <summary>Marks the registration as having a specific constructor parameter discovered by name, whose value is resolved by a callback. </summary>
            <typeparam name="T">The type of the service to resolve in order to pass in as the value of the parameter.</typeparam>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrarModifier`2.WithProperty(System.String,System.Object)">
            <summary>Marks the registration as having a specific property value to be injected, discovered by name. </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value to be injected.</param>
            <returns>.</returns>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.IServiceRegistrarModifier`2.WithMetadata``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>Associates the registration with metadata, which will be made available to the service on resolution. </summary>
            <typeparam name="TMetadata">The <typeparamref name="TMetadata" /> type used for the metadata.</typeparam>
            <typeparam name="TProperty">The <typeparamref name="TProperty" /> type used for the property.</typeparam>
            <param name="propertyAccessor">The property accessor.</param>
            <param name="value">The value.</param>
            <returns>.</returns>
        </member>
        <member name="T:Umbraco.Framework.DependencyManagement.ResolutionAttempt`1">
            <summary>
            Represnets an IoC resolution attempt
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.ResolutionAttempt`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.DependencyManagement.ResolutionAttempt`1"/> class.
            </summary>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.ResolutionAttempt`1.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.DependencyManagement.ResolutionAttempt`1"/> class when an error occurs and was not-successful
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:Umbraco.Framework.DependencyManagement.ResolutionAttempt`1.UpdateError(System.Exception)">
            <summary>
            Updates the error on this resolution attempt.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Umbraco.Framework.DependencyManagement.ResolutionAttempt`1.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.DependencyManagement.ResolutionAttempt`1.Success">
            <summary>
            The success of the resolution attempt.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.DependencyManagement.ResolutionAttempt`1.Value">
            <summary>
            The resulting value of the resolution attempt, if any.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.IProviderManifest.AssemblyName">
            <summary>
            Gets the name of the assembly containing this provider.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Umbraco.Framework.IProviderManifest.TypeName">
            <summary>
            Gets the name of the type this Provider represents.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:Umbraco.Framework.IProviderManifest.MappingAlias">
            <summary>
            Gets or sets the mapping alias, typically a short key used in configuration or an EntityProviderMap
            which is a guaranteed constant for referring to this instance of the provider across
            multiplle instances of the entire application.
            </summary>
            <value>The mapping alias.</value>
        </member>
        <member name="T:Umbraco.Framework.IReferenceByGuid">
            <summary>
            Stipulates that implementing types must have an <see cref="P:Umbraco.Framework.IReferenceByGuid.Id"/> property of type <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.ISupportsProviderInjection">
            <summary>
            Defines that an object be suitable for dependency injection.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.IReferenceByOrdinal">
            <summary>
            Permits an object to be referenced by its ordinal
            </summary>
        </member>
        <member name="P:Umbraco.Framework.IReferenceByOrdinal.Ordinal">
            <summary>
            Gets the ordinal.
            </summary>
            <value>The ordinal.</value>
        </member>
        <member name="T:Umbraco.Framework.PluginAttribute">
            <summary>
            Represents an interface used for all plugins
            </summary>
        </member>
        <member name="M:Umbraco.Framework.PluginAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>        
            <param name="id"></param>
        </member>
        <member name="M:Umbraco.Framework.PluginDefinitionExtensions.HasRoutablePackageArea(Umbraco.Framework.PluginDefinition)">
            <summary>
            Returns true if the plugin definition belongs to a package that is not a core package or a local plugin
            </summary>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.PluginDefinition">
            <summary>
            Defines a plugin
            </summary>
        </member>
        <member name="P:Umbraco.Framework.PluginDefinition.ReferencedAssembly">
            <summary>
            The assembly that has been shadow copied that is active in the application
            </summary>
        </member>
        <member name="P:Umbraco.Framework.PluginDefinition.IsCorePlugin">
            <summary>
            True if the plugin is a core plugin
            </summary>
        </member>
        <member name="P:Umbraco.Framework.PluginDefinition.PackageName">
            <summary>
            The package folder name
            </summary>
        </member>
        <member name="P:Umbraco.Framework.PluginDefinition.OriginalAssemblyFile">
            <summary>
            The original assembly file that a shadow copy was made from it
            </summary>
        </member>
        <member name="T:Umbraco.Framework.PluginMetadataComposition">
            <summary>
            Abstract meta data class defining a metadata for a Plugin
            </summary>
        </member>
        <member name="P:Umbraco.Framework.PluginMetadataComposition.PluginDefinition">
            <summary>
            The definition of the plugin that contains this editor
            </summary>
        </member>
        <member name="P:Umbraco.Framework.PluginMetadataComposition.ComponentType">
            <summary>
             The Type of the plugin
            </summary>
        </member>
        <member name="P:Umbraco.Framework.PluginMetadataComposition.Id">
            <summary>
            The Id of the plugin
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Data.Common.RepositoryGeneratedToken">
            <summary>
            A no-op concurrency token for use when objects have yet to be created in the repository.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Data.Common.RepositoryGeneratedToken.ConcurrencyToken">
            <summary>
              Gets or sets the concurrency token.
            </summary>
            <value>The concurrency token.</value>
        </member>
        <member name="T:Umbraco.Framework.Tasks.ApplicationTaskManager">
            <summary>
            A service for executing tasks when they match given trigger names
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ApplicationTaskManager.#ctor(System.Collections.Generic.IEnumerable{System.Lazy{Umbraco.Framework.Tasks.AbstractTask,Umbraco.Framework.Tasks.TaskMetadata}})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Tasks.ApplicationTaskManager"/> class.
            </summary>
            <param name="tasks">The tasks.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ApplicationTaskManager.AddTask(System.Lazy{Umbraco.Framework.Tasks.AbstractTask,Umbraco.Framework.Tasks.TaskMetadata})">
            <summary>
            Registers a task handler with the manager.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ApplicationTaskManager.AddTask(System.String,System.Func{Umbraco.Framework.Tasks.AbstractTask},System.Boolean)">
            <summary>
            Registers a task handler with the manager.
            </summary>
            <param name="triggerName">Name of the trigger.</param>
            <param name="valueFactory">The factory which will create the handler.</param>
            <param name="continueOnError">if set to <c>true</c> [continue on error].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ApplicationTaskManager.AddTask(System.Func{Umbraco.Framework.Tasks.AbstractTask},Umbraco.Framework.Tasks.TaskMetadata)">
            <summary>
            Registers a task handler with the manager.
            </summary>
            <param name="valueFactory">The factory which will create the handler.</param>
            <param name="metaData">The meta data for the task.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ApplicationTaskManager.AddDelegateTask(System.String,System.Action{Umbraco.Framework.Tasks.TaskExecutionContext})">
            <summary>
            Adds a new delegate task to the task manager with the specified trigger
            </summary>
            <param name="triggerName"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ApplicationTaskManager.ExecuteInContext(System.String,System.Object,Umbraco.Framework.Tasks.TaskEventArgs)">
            <summary>
            Executes the task in the current context synchronously
            </summary>
            <param name="triggerName">Name of the trigger.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:Umbraco.Framework.Tasks.TaskEventArgs"/> instance containing the event data.</param>
            <returns>The <see cref="T:Umbraco.Framework.Tasks.TaskExecutionContext"/> in which the tasks run.</returns>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ApplicationTaskManager.ExecuteInContext(System.String,Umbraco.Framework.Tasks.TaskExecutionContext)">
            <summary>
            Executes the task in the current context synchronously. Executes the tasks matching the specified trigger name.
            </summary>
            <param name="triggerName">Name of the trigger.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Umbraco.Framework.Tasks.ApplicationTaskManager.ExecuteInContext(System.String,Umbraco.Framework.Tasks.TaskExecutionContext,System.Boolean@)">
            <summary>
            Executes the task in the current context synchronously. Executes the tasks matching the specified trigger name.
            </summary>
            <param name="triggerName">Name of the trigger.</param>
            <param name="context">The context.</param>
            <param name="canceled">if set to <c>true</c> taks was canceled.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.Tasks.TaskExecutionContext">
            <summary>
            A context for passing state along a task execution queue
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Tasks.TaskExecutionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.Tasks.TaskExecutionContext.#ctor(System.Object,Umbraco.Framework.Tasks.TaskEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskExecutionContext.EventSource">
            <summary>
            Gets or sets the event source.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskExecutionContext.EventArgs">
            <summary>
            Gets or sets the event args.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskExecutionContext.TaskQueueData">
            <summary>
            Gets or sets the task queue data for passing information along to other tasks in the queue.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskExecutionContext.Cancel">
            <summary>
            Gets or sets a value indicating whether the queue should cancel execution
            </summary>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskExecutionContext.Exceptions">
            <summary>
            Gets or sets the exceptions.
            </summary>
            <value>
            The exceptions.
            </value>
        </member>
        <member name="T:Umbraco.Framework.Tasks.TaskMetadata">
            <summary>
            Outlines metadata for the registration of Tasks with MEF
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Tasks.TaskMetadata.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            constructor, sets all properties of this object based on the dictionary values
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Umbraco.Framework.Tasks.TaskMetadata.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Tasks.TaskMetadata"/> class.
            </summary>
            <param name="triggerName">Name of the trigger.</param>
            <param name="continueOnError">if set to <c>true</c> [continue on error].</param>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskMetadata.TriggerName">
            <summary>
            Gets or sets the name of the trigger to which the task should subscribe.
            </summary>
            <value>The name of the trigger.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskMetadata.ContinueOnError">
            <summary>
            Gets or sets a value indicating whether to continue if an error is encountered running the associated task
            </summary>
        </member>
        <member name="T:Umbraco.Framework.Tasks.TaskAttribute">
            <summary>
            When a class is decorated with this attribute it denotes that it subscribes to the specified task trigger
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.Tasks.TaskAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.Tasks.TaskAttribute"/> class.
            </summary>
            <param name="id">The unique identifier for the task</param>
            <param name="trigger">The trigger.</param>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskAttribute.Trigger">
            <summary>
            Gets the name of the trigger.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.Tasks.TaskAttribute.ContinueOnFailure">
            <summary>
            Gets or sets a value indicating whether a task queue execution should be continued if this task fails
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Checks if the type is an anonymous type
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            reference: http://jclaes.blogspot.com/2011/05/checking-for-anonymous-types.html
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeExtensions.GetCustomMemberAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="inherited">if set to <c>true</c> [inherited].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeExtensions.GetCustomMemberAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the custom attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="inherited">if set to <c>true</c> [inherited].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeExtensions.GetPropertiesWithCustomAttributes``1(System.Type,System.Boolean)">
            <summary>
            Gets the properties with custom attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="inherited">if set to <c>true</c> [inherited].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Determines whether the specified type is enumerable.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.TypeExtensions.IsOfGenericType(System.Type,System.Type)">
            <summary>
            Determines whether [is of generic type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <param name="genericType">Type of the generic.</param>
            <returns>
              <c>true</c> if [is of generic type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.TypeExtensions.TryGetGenericArguments(System.Type,System.Type,System.Type[]@)">
            <summary>
            Will find the generic type of the 'type' parameter passed in that is equal to the 'genericType' parameter passed in
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="genericArgType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeExtensions.IsType``1(System.Type)">
            <summary>
            Determines whether the specified actual type is type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actualType">The actual type.</param>
            <returns>
              <c>true</c> if the specified actual type is type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.TypeExtensions.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a ValueType at runtime.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.TypeFinder">
            <summary>
            A utility class to find all classes of a certain type by reflection in the current bin folder
            of the web application. 
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.GetAllAssemblies">
            <summary>
            lazily load a reference to all assemblies and only local assemblies.
            This is a modified version of: http://www.dominicpettifer.co.uk/Blog/44/how-to-get-a-reference-to-all-assemblies-in-the--bin-folder
            </summary>
            <remarks>
            We do this because we cannot use AppDomain.Current.GetAssemblies() as this will return only assemblies that have been 
            loaded in the CLR, not all assemblies.
            See these threads:
            http://issues.umbraco.org/issue/U5-198
            http://stackoverflow.com/questions/3552223/asp-net-appdomain-currentdomain-getassemblies-assemblies-missing-after-app
            http://stackoverflow.com/questions/2477787/difference-between-appdomain-getassemblies-and-buildmanager-getreferencedassembl
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.GetBinFolderAssemblies">
            <summary>
            Returns all assemblies loaded in the bin folder that are not in GAC
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.GetFilteredBinFolderAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Return a list of found local Assemblies in the bin folder exluding the ones passed in and excluding the exclusion list filter
            </summary>
            <param name="excludeFromResults"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.GetFilteredLocalAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String[])">
            <summary>
            Return a list of found local Assemblies including plugins and exluding the ones passed in and excluding the exclusion list filter
            </summary>
            <param name="excludeFromResults"></param>
            <param name="exclusionFilter"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Framework.TypeFinder.KnownAssemblyExclusionFilter">
            <summary>
            this is our assembly filter to filter out known types that def dont contain types we'd like to find or plugins
            </summary>
            <remarks>
            NOTE the comma vs period... comma delimits the name in an Assembly FullName property so if it ends with comma then its an exact name match
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.IsTypeAssignableFrom``1(System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.IsTypeAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="contract">The type of the contract.</param>
            <param name="implementation">The implementation.</param>
            <returns>
            	<c>true</c> if [is type assignable from] [the specified contract]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.IsValueType(System.Type)">
            <summary>
            A cached method to determine whether <paramref name="implementation"/> represents a value type.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.IsImplicitValueType(System.Type)">
            <summary>
            A cached method to determine whether <paramref name="implementation"/> is an implied value type (<see cref="P:System.Type.IsValueType"/>, <see cref="P:System.Type.IsEnum"/> or a string).
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="F:Umbraco.Framework.TypeFinder._attributedAssemblies">
            <summary>
            Caches attributed assembly information so they don't have to be re-read
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.FindAssembliesWithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Returns assemblies found in the specified path that the the specified custom attribute type applied to them
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies">The assemblies to search on</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.FindClassesOfType``2(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Returns found types in assemblies attributed with the specifed attribute type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAssemblyAttribute"></typeparam>
            <param name="assemblies">The assemblies to search on</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.FindClassesOfType``2(System.Reflection.Assembly)">
            <summary>
            Returns found types in an assembly attributed with the specifed attribute type
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAssemblyAttribute">The type of the assembly attribute.</typeparam>
            <param name="assembly">The assembly.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Searches all assemblies specified for classes of the type passed in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblyFiles"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Searches all assemblies specified for classes of the type passed in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblyFiles"></param>
            <param name="onlyConcreteClasses">Only resolve concrete classes that can be instantiated</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Returns all types found of in the assemblies specified of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Returns all types found of in the assemblies specified of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.FindClassesOfType``1(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Used to find all types in all assemblies in the specified folder
            </summary>
            <typeparam name="T"></typeparam>
            <param name="folder"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
            <remarks>
            This has potential cost alot in performance so it is marked internal and should ONLY be used
            where absolutely necessary (i.e. Tests)
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.FindClassesOfType``1(System.IO.DirectoryInfo)">
            <summary>
            Used to find all types in all assemblies in the specified folder
            </summary>
            <typeparam name="T"></typeparam>
            <param name="folder"></param>
            <returns></returns>
            <remarks>
            This has potential cost alot in performance so it is marked internal and should ONLY be used
            where absolutely necessary (i.e. Tests)
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.GetAssignablesFromType``1(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets a collection of assignables of type T from a collection of files
            </summary>
            <typeparam name="T"></typeparam>
            <param name="files">The files.</param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.GetAssignablesFromType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Gets a collection of assignables of type T from a collection of assemblies
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.GetTypes(System.Type,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Returns of a collection of type names from a collection of assembky files.
            </summary>
            <param name="assignTypeFrom">The assign type.</param>
            <param name="assemblyFiles">The assembly files.</param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.CachedDiscoverableFields(System.Type)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.FieldInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.CachedDiscoverableProperties(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.PropertyInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <param name="mustRead">true if the properties discovered are readable</param>
            <param name="mustWrite">true if the properties discovered are writable</param>
            <param name="includeIndexed">true if the properties discovered are indexable</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.TypeFinder.DynamicMemberAccess">
            <summary>
            Used for access to properties that is faster than Reflection over the course of an application lifetime.
            Startup time will be lower but the expressions used are cached in a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> following compilation.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.DynamicMemberAccess.GetterDelegate(System.Reflection.PropertyInfo)">
            <summary>
            Gets a delegate capable of retrieving the value of a <see cref="T:System.Reflection.PropertyInfo"/> on an object.
            Retrieves the expression from an application-wide cache to avoid repeated compilation.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
            <remarks>Returns <code>null</code> if <see cref="P:System.Reflection.PropertyInfo.CanRead"/> is <code>false</code>.</remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.DynamicMemberAccess.SetterDelegate(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets a delegate capable of setting the value of a <see cref="T:System.Reflection.PropertyInfo"/> on an object.
            Retrieves the expression from an application-wide cache to avoid repeated compilation.
            </summary>
            <param name="property">The property.</param>
            <param name="nonPublic">if set to <c>true</c> [include non public].</param>
            <returns></returns>
            <remarks>Returns <code>null</code> if <see cref="P:System.Reflection.PropertyInfo.CanWrite"/> is <code>false</code>.</remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.DynamicMemberAccess.CompileGetterDelegate(System.Reflection.PropertyInfo)">
            <summary>
            Gets a delegate capable of retrieving the value of a <see cref="T:System.Reflection.PropertyInfo"/> on an object.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
            <remarks>Returns <code>null</code> if <see cref="P:System.Reflection.PropertyInfo.CanRead"/> is <code>false</code>.</remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.DynamicMemberAccess.CompileSetterDelegate(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets a delegate capable of setting the value of a <see cref="T:System.Reflection.PropertyInfo"/> on an object.
            </summary>
            <param name="property">The property.</param>
            <param name="nonPublic">if set to <c>true</c> [include non public].</param>
            <returns></returns>
            <remarks>Returns <code>null</code> if <see cref="P:System.Reflection.PropertyInfo.CanWrite"/> is <code>false</code>.</remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.AttributedAssemblyList.IsRegistered``1(System.IO.DirectoryInfo)">
            <summary>
            Determines if  that type has been registered with the folder
            </summary>
            <typeparam name="T"></typeparam>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeFinder.AttributedAssemblyList.IsRegistered``1(System.Reflection.Assembly)">
            <summary>
            Determines if the assembly is already registered
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.AbstractLookupHelper">
            <summary>
            Provides assistance to mapping operations should values keyed by <see cref="T:Umbraco.Framework.HiveId"/> need resolving during mapping operations
            such as hydrating a deeper object graph than available in the source of the mapping operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.AbstractMappingEngine">
            <summary>
            An abstract implementation of an object value mapper.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.Map``2(``0)">
            <summary>
            Maps the specified source to a new instance, given an explicitly defined source <typeparamref name="TSource"/> and destination <typeparamref name="TDestination"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.Map``1(System.Object)">
            <summary>
            Maps the specified source to an instance of type <typeparamref name="TDestination"/>.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.Map``2(``0,``1)">
            <summary>
            Maps the specified source onto an existing instance <paramref name="destination"/>, given an explicitly defined source <typeparamref name="TSource"/> and destination <typeparamref name="TDestination"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.Map(System.Object,System.Type,System.Type)">
            <summary>
            Maps the specified source to a new instance, given an explicitly defined source <paramref name="sourceType"/> and destination <paramref name="destinationType"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.Map(System.Object,System.Object,System.Type,System.Type)">
            <summary>
            Maps the specified source onto an existing instance <paramref name="destination"/>, given an explicitly defined source <paramref name="sourceType"/> and destination <paramref name="destinationType"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="destinationType">Type of the destination.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.Configure">
            <summary>
            Configures this instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.GetDynamicSupportedMappings">
            <summary>
            Gets supported mappings which can only be declared dynamically at runtime
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.Map``1(System.Object,System.Action{``0})">
            <summary>
            Maps the specified source to an instance of type <typeparamref name="TDestination"/>, and runs a delegate <paramref name="afterMapIfNotNull"/> 
            before returning if the mapping operation does not result in a null value.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source">The source.</param>
            <param name="afterMapIfNotNull">The after map if not null.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.WeakMap(System.Object,System.Object)">
            <summary>
            Maps <paramref name="source"/> to <paramref name="destination"/> by trying to find a map configuration using the precise type of the 
            provided instances, rather than explicit typing.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.TryGetDestinationType(System.Type,System.Type@)">
            <summary>
            Tries to find a destination type given the <paramref name="sourceType"/>.
            </summary>
            <param name="sourceType">The source.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.TryGetDestinationType(System.Type,System.Type,System.Type@)">
            <summary>
            Tries to find a destination type given the <paramref name="sourceType"/> and a target type that is equal to or inherits from <paramref name="baseDestinationType"/>.
            </summary>
            <param name="sourceType">The source.</param>
            <param name="baseDestinationType">Base type of the destination.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.MapToIntent``1(System.Object)">
            <summary>
            Finds a map handler that can map from the type of <paramref name="source"/>, to a target type that is equal to or inherits from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.MapToIntent(System.Object,System.Type)">
            <summary>
            Finds a map handler that can map from the type of <paramref name="source"/>, to a target type that is equal to or inherits from <paramref name="baseDestinationType"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="baseDestinationType">Base type of the destination.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.TryGetDestinationType``1(System.Type@)">
            <summary>
            Tries to find a destination type given the <typeparamref name="TSource"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.TryGetDestinationType``2(System.Type@)">
            <summary>
            Tries to find a destination type given the <typeparamref name="TSource"/>, and a target type that is equal to or inherits from <typeparamref name="TBaseOfDestination"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TBaseOfDestination">The type of the base of destination.</typeparam>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.AbstractMappingEngine.IsConfigured">
            <summary>
            Gets or sets a value indicating whether this instance is configured.
            </summary>
            <value><c>true</c> if this instance is configured; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.AbstractTypeMapperExtensions">
            <summary>
            Extension methods for the AbstractTypemapper
            </summary>
        </member>
        <member name="M:Umbraco.Framework.AbstractTypeMapperExtensions.Map``2(Umbraco.Framework.TypeMapping.AbstractMappingEngine,``0,System.Action{``1})">
            <summary>
            Maps the specified mapper with an after map "if null" delegate
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="mapper">The mapper.</param>
            <param name="source">The source.</param>
            <param name="afterMapIfNotNull">The after map if not null.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.AbstractTypeMapperExtensions.TryGetDestinationTypeFromDynamicSupportedMappings(Umbraco.Framework.TypeMapping.AbstractMappingEngine,System.Type,System.Type@)">
            <summary>
            Tries to get destination type from dynamic supported mappings.
            </summary>
            <param name="mapper">The mapper.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.AbstractTypeMapperExtensions.TryGetDestinationTypeFromDynamicSupportedMappings(Umbraco.Framework.TypeMapping.AbstractMappingEngine,System.Type,System.Type,System.Type@)">
            <summary>
            Tries to get destination type from dynamic supported mappings.
            </summary>
            <param name="mapper">The mapper.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="baseDestinationType">Type of the base destination.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.ITypeMapper`2">
            <summary>
            Interface to describe mapping a type from one type to another
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.ITypeMapper">
            <summary>
            Basic interface to handle mapping two types
            </summary>
            <remarks>
            Used internally in the mapping framework when strongly typed entities are not available.
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.Map(`0)">
            <summary>
            Maps the specified source to a new destination object
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.Map(`0,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Maps from the source to the new destination type
            </summary>
            <param name="source"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.Map(`0,`1)">
            <summary>
            Maps the specified to the destination
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.Map(`0,`1,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Maps the source to the destination.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="scope"></param>
            <remarks>>
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.PerformMap(`0,`1,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Virtual method to override for custom mapping operations
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="scope"></param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.ExecuteAfterMap(`0,`1)">
            <summary>
            Executes the after map.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.MappingContext">
            <summary>
            Gets or sets the mapping context.
            </summary>
            <value>The mapping context.</value>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.MapperId">
            <summary>
            Useful for debugging
            </summary>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.AbstractTypeMapper`2.SourceType">
            <summary>
            Gets the type of the source.
            </summary>
            <value>The type of the source.</value>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine">
            <summary>
            A mapping engine allowing for fluent mapping declarations
            </summary>
        </member>
        <member name="F:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine._mappers">
            <summary>
            Tracks all of the mappers
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.GetMapperDefinition``2">
            <summary>
            Gets a mapper.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.GetMapperDefinition``2(System.Boolean)">
            <summary>
            Gets a mapper.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="createIfNotExists">if set to <c>true</c> [create if not exists].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.GetMapperDefinition(System.Type,System.Type)">
            <summary>
            Gets a mapper, or creates a new implicit map if an explicity one is not defined
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.GetMapperDefinition(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets a mapper, or creates a default mapper if one hasn't been defined if createIfNotExists is true
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="createIfNotExists">Creates a default mapper if one hasn't been defined</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.AddMap(Umbraco.Framework.TypeMapping.ITypeMapper,Umbraco.Framework.TypeMapping.TypeMapperMetadata)">
            <summary>
            Adds a map
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.ClearMappers">
            <summary>
            Clears the mappers collection, used internall for testing
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.Map``2(``0)">
            <summary>
            Maps the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.Map``2(``0,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Maps from a source to a new destination
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.Map``2(``0,``1)">
            <summary>
            Maps the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.Map(System.Object,System.Type,System.Type)">
            <summary>
            Maps the specified source to a new instance, given an explicitly defined source <paramref name="sourceType"/> and destination <paramref name="destinationType"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.Map(System.Object,System.Type,System.Type,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Maps an existing object to a new object
            </summary>
            <param name="source">The source.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="destinationType">Type of the destination.</param>
            <param name="scope">The scope.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.MapToSubclass(System.Object,System.Type,System.Type,System.Type,Umbraco.Framework.TypeMapping.MapperDefinition,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Maps the source object and source object type to the destinationSubclassType based on a mapper that supports inheritance 
            with a destination type specified as the destinationBaseclassType.
            </summary>
            <remarks>
            An example of this is if a map was defined to go from an Examine SearchResult to a TypedEntity with the allow inheritance flag
            set to true and then a mapping operation occured from a SearchResult to a User (a subclass of TypedEntity).
            
            This method will first check to see if there is a mapping operation declared to go between the baseclass to the subclass, if so
            it will perform the normal mapping from the source object to the destinationBaseclassType, and then map from the base class type
            to the sub class type.
            
            If this method doesn't find a map to go from the base class type to the sub class type, it will attempt to instantiate a new
            instance of the subclass and then do a map to the new existing object using the mapper already defined.
            </remarks>
            <param name="source"></param>
            <param name="sourceType"></param>
            <param name="destinationBaseclassType"></param>
            <param name="destinationSubclassType"></param>
            <param name="mapperDefinition"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.Map(System.Object,System.Object,System.Type,System.Type)">
            <summary>
            Maps the specified source onto an existing instance <paramref name="destination"/>, given an explicitly defined source <paramref name="sourceType"/> and destination <paramref name="destinationType"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="destinationType">Type of the destination.</param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.Configure">
            <summary>
            Sealed method which is called by the TypeMapper to configure mappings, this method will check if it is configured
            and if not call the abstract ConfigureMappings method, then set the IsConfigured flag to true
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine.ConfigureMappings">
            <summary>
            Abstract method used to configure all of the mappings
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.FrameworkModelMapper.ConfigureLocalizationModelMappings">
            <summary>
            Creates mappings for localization models
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.MapperDefinition">
            <summary>
            Defines a mapper definition with both the mapper instance and its metadata
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.MappingExecutionScope">
            <summary>
            An object representing the scope of a single root mapping operation.
            Used to track mapped objects, ensuring if an incoming map request refers to an instance that
            has already been mapped, the existing destination instance is returned instead, to increase performance,
            and also to ensure the same referential integrity on the output of a map as existed in the incoming
            object graph at the start of the mapping operation.
            </summary>
            <remarks>Check that out for a long sentence.</remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingExecutionScope.CreateOnce(System.Object,System.Type,System.Func{System.Object})">
            <summary>
            Checks with <see cref="P:Umbraco.Framework.TypeMapping.MappingExecutionScope.MapCache"/>; if <paramref name="source"/> has already been mapped to <paramref name="targetType"/> then the original
            map result is returned. Otherwise, <paramref name="factory"/> is used to map the object to its target type.
            </summary>
            <param name="source">The source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.MappingExecutionScope.ScopeId">
            <summary>
            useful for debugging
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.ObjectDefinition">
            <summary>
            Defines an object
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.PropertyCache">
            <summary>
            Used to lookup property descriptors for types/object and cache them internal so we don't need to look them up again
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.PropertyDefinition">
            <summary>
            Defines a property
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.PropertyMapDefinition">
            <summary>
            Defines a map from a source to a target object
            </summary>
        </member>
        <member name="T:Umbraco.Framework.PropertyMapDefinitionExtensions">
            <summary>
            Extension methods for TypeMapDefinition class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Framework.PropertyMapDefinitionExtensions.GetTargetObjectHashCode(Umbraco.Framework.TypeMapping.PropertyMapDefinition)" -->
        <member name="T:Umbraco.Framework.TypeMapping.DelegatedMapHandlerList">
            <summary>
            Maintains a list of delegates which can map from one type to another, given a key of type <see cref="T:Umbraco.Framework.TypeMapping.TypeMapperMetadata"/> which describes the 
            source and destination types of the delegate.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.DelegatedMapHandlerList.Add``2(System.Func{``0,Umbraco.Framework.TypeMapping.AbstractLookupHelper,Umbraco.Framework.TypeMapping.AbstractMappingEngine,``1},System.Action{``0,``1,Umbraco.Framework.TypeMapping.AbstractLookupHelper,Umbraco.Framework.TypeMapping.AbstractMappingEngine},System.Boolean)">
            <summary>
            Adds the specified handler.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="handler">The handler.</param>
            <param name="refHandler">The ref handler.</param>
            <param name="permitTypeInheritance">if set to <c>true</c> [permit type inheritance].</param>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.Creator">
            <summary>
            Simple class to create new objects of the specified type.
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2">
            <summary>
            Maps an IEnumerable type to another
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <remarks>
            When mapping to an existing destination, this will only work if the underlying IEnumerable type is IEnumerable{T} when mapping to a new object,
            otherwise if mapping to an existing object, the collection needs to be anything that has an Add and Clear method such as an IList or IDictionary otherwise
            you will have to inherit from this class.
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2.PerformMap(`0,`1,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Maps the specified source to the existing destination
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2.GetEnumerableItemType``1">
            <summary>
            This will search each base type of this object until it finds IEnumerable{T}, then will return the type of {T}.
            If TTarget doesn't implement IEnumerable{T} an exception is thrown
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2.CreateTarget">
            <summary>
            Trys to create the target type if no CreateUsing is specified, if it can't create the native type, the it will create a generic list and attempt to cast it back to TTarget.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2.GetEnumerableSourceItemType">
            <summary>
            Override this method to specify the explicit item type of the Enumerable collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2.GetEnumerableTargetItemType">
            <summary>
            Override this method to specify the explicit item type of the Enumerable collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2.CreateEnumerableItem(`0,`1)">
            <summary>
            Override this method to 
            </summary>
            <param name="source"></param>
            <param name="enumerableTarget">pass in  the target object as it may be required to create a child item object</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2.PerformAddItem(System.Object,System.Object)">
            <summary>
            Does the adding of an item to the collection
            </summary>
            <param name="collection"></param>
            <param name="item"></param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2.PerformClear(System.Object)">
            <summary>
            Does the clearing of the collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.EnumerableTypeMapper`2.PerformMapping(`0,`1,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Helper method to do the add/clear of the IEnumerable
            </summary>
            <param name="sourceSequence"></param>
            <param name="targetSequence"></param>
            <param name="mappingExecutionScope"></param>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.IMemberMappingExpression`1">
            <summary>
            Used to create the mapping rules for members when creating maps
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.IMappingExpression`2.AfterMap(System.Action{`0,`1})">
            <summary>
            Defines a delegate to execute after the mapping
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="afterMap">The after map.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.IMappingExpression`2.CreateUsing(System.Func{`0,`1})">
            <summary>
            Defines a delegate to create the target
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="createUsing">The create using.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.IMappingExpression`2.ForMember``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Action{Umbraco.Framework.TypeMapping.IMemberMappingExpression{`0}})">
            <summary>
            Defines an operation for a member
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="destinationMember"></param>
            <param name="memberOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.IMemberMapper">
            <summary>
            Base interface for mapping members using MapUsing
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.TypeMapDefinition">
            <summary>
            Defines a type map with a Source and Destination type
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.TypeMapper`2">
            <summary>
            The class for any custom mapping operations between 2 types
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.FluentMappingEngineContext`2">
            <summary>
            Each injector mapping operations contains a context which represents the Mapping engine being used to 
            do all of the mappings and exposes internally the member rules for mapping operations.
            
            One mapping context exists for each map created.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.FluentMappingEngineContext`2.AddMemberExpression``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Action{Umbraco.Framework.TypeMapping.IMemberMappingExpression{`0}})">
            <summary>
            Adds a member expression to the internal list
            </summary>
            <param name="member"></param>
            <param name="actionToExecute">The expression.</param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.FluentMappingEngineContext`2.AddMemberExpression(System.Type,System.Type,System.String,System.Action{Umbraco.Framework.TypeMapping.IMemberMappingExpression{`0}})">
            <summary>
            Adds a member expression to the internal list
            </summary>
            <param name="targetMemberType"></param>
            <param name="targetMemberContainerType"></param>
            <param name="targetMemberName"></param>
            <param name="actionToExecute"></param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.FluentMappingEngineContext`2.MapFromRule(Umbraco.Framework.TypeMapping.PropertyMapDefinition,Umbraco.Framework.TypeMapping.MemberExpressionSignature,System.Object@)">
            <summary>
            Determine if the member value should be mapped from a rule, if true, then the value of 'value' will be set to the custom mapping
            </summary>
            <param name="info"></param>
            <param name="expression"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.FluentMappingEngineContext`2.Engine">
            <summary>
            Gets the current MappingEngine
            </summary>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.FluentMappingEngineContext`2.FrameworkContext">
            <summary>
            The current IFrameworkContext
            </summary>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.FluentMappingEngineContext`2.CreateUsingAction">
            <summary>
            Gets or sets the create using delegate for the Target type
            </summary>
            <value>
            The create using.
            </value>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.FluentMappingEngineContext`2.AfterMapAction">
            <summary>
            Gets or sets the after map delegate for the mapping operation
            </summary>
            <value>
            The after map.
            </value>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.FluentMappingEngineContext`2.MemberExpressions">
            <summary>
            Returns all member expressions registered
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.MemberMappingExpression`1">
            <summary>
            Used to set the member rules when creating mappings
            </summary>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.MappingExpression`2">
            <summary>
            A class to aid in the Fluent construct of mapping expressions
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <remarks>
            This class is used to create the fluent mapping expressions, for each method called it adds 
            the expressions to the underyling MappingContext.
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingExpression`2.AfterMap(System.Action{`0,`1})">
            <summary>
            Defines a delegate to execute after the mapping
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="afterMap">The after map.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingExpression`2.CreateUsing(System.Func{`0,`1})">
            <summary>
            Defines a delegate to create the target
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="createUsing">The create using.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingExpression`2.ForMember``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Action{Umbraco.Framework.TypeMapping.IMemberMappingExpression{`0}})">
            <summary>
            Defines an operation for a member
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="destinationMember"></param>
            <param name="memberOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.MemberMapper`2">
            <summary>
            Base class for mapping members using MapUsing
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TMember"></typeparam>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.ObjectMapper`2">
            <summary>
            A mapper that performs mapping the properties of two objects taking into account any rules applied for each 
            member. If mapping cannot be directly applied, the process is sent back to the engine to attempt the mapping.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.ObjectMapper`2.SetProperty(System.Reflection.PropertyInfo,System.Object,System.Object,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Sets the target properties value
            </summary>
            <param name="targetReflectedProp"></param>
            <param name="targetObject"></param>
            <param name="valueToSet"></param>
            <param name="scope"></param>
            <remarks>
            This will check if the value can be set natively, if not it will check if a map is declared for the types and use it if one is found.
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.ObjectMapper`2.IsTypeMappable(System.Type,System.Type)">
            <summary>
            Check that values can be set from -> to without any specific casting (i.e. Non-nullables to nullable)
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.ObjectMapper`2.MapToExisting(System.Object,System.Object,System.Type,System.Type)">
            <summary>
            Maps to an existing value,this first checks for mappers in the local engine and if not found will then try to get 
            a mapper from the framework context's engine collection, if nothing is found there either a map is implicitly created.
            </summary>
            <param name="sourceVal"></param>
            <param name="targetVal"></param>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.ObjectMapper`2.MapToNew(System.Object,System.Type,System.Type,Umbraco.Framework.TypeMapping.MappingExecutionScope)">
            <summary>
            Maps to a new value, this first checks for mappers in the local engine and if not found will then try to get 
            a mapper from the framework context's engine collection, if nothing is found there either a map is implicitly created.
            </summary>
            <param name="sourceVal"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.ObjectMapper`2.IsMapperRegistered(System.Type,System.Type)">
            <summary>
            Checks if a mapper is registered for the from and to types, this first checks local registration with the 
            current Engine and if not found, then checks registration with the framework context's type mapper collection
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.ObjectMapper`2.AddMemberMapped(Umbraco.Framework.TypeMapping.PropertyMapDefinition)">
            <summary>
            Adds the hash code of the member that has been mapped
            </summary>
            <param name="member">The member to get the hashcode from</param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.ObjectMapper`2.IsAlreadyMapped(Umbraco.Framework.TypeMapping.PropertyMapDefinition)">
            <summary>
            Determines whether the member is already mapped
            </summary>
            <param name="member">The member.</param>
            <returns>
              <c>true</c> if [is already mapped] [the specified member]; otherwise, <c>false</c>.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Framework.MappingEngineExtensions.CreateEnumerableMap``2(Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine)" -->
        <member name="M:Umbraco.Framework.MappingEngineExtensions.SelfMap``1(Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine)">
            <summary>
            Maps a type to itself. This is used to clone an object.
            </summary>
            <typeparam name = "TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.MappingEngineExtensions.SelfMap``1(Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine,System.Boolean)">
            <summary>
            Maps a type to itself. This is used to clone an object.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="engine"></param>
            <param name="permitInheritance"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.MappingEngineExtensions.CreateMap``2(Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine,Umbraco.Framework.TypeMapping.ITypeMapper{``0,``1})">
            <summary>
            Creates a new mapper with the specified mapper and default metadata
            </summary>
            <typeparam name="TS">The type of the S.</typeparam>
            <typeparam name="TT">The type of the T.</typeparam>
            <param name="engine"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Umbraco.Framework.MappingEngineExtensions.CreateMap``2(Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine,Umbraco.Framework.TypeMapping.ITypeMapper{``0,``1},System.Boolean)">
            <summary>
            Creates a new mapper with the specified mapper and default metadata with the permitInheritance flag
            </summary>
            <typeparam name="TS"></typeparam>
            <typeparam name="TT"></typeparam>
            <param name="engine"></param>
            <param name="mapper"></param>
            <param name="permitInheritance"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Framework.MappingEngineExtensions.CreateMap``2(Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine,Umbraco.Framework.TypeMapping.ITypeMapper{``0,``1},Umbraco.Framework.TypeMapping.TypeMapperMetadata)" -->
        <member name="M:Umbraco.Framework.MappingEngineExtensions.CreateMap``2(Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine,System.Boolean)">
            <summary>
            Creates a new map with the default metadata and default mapper
            </summary>
            <typeparam name="TS"></typeparam>
            <typeparam name="TT"></typeparam>
            <param name="engine"></param>
            <param name="permitInheritance"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.MappingEngineExtensions.CreateMap``2(Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine,Umbraco.Framework.TypeMapping.TypeMapperMetadata)">
            <summary>
            Creates a new map with the specified metadata and default mapper
            </summary>
            <typeparam name="TS"></typeparam>
            <typeparam name="TT"></typeparam>
            <param name="engine"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.MappingEngineExtensions.CreateMap``2(Umbraco.Framework.TypeMapping.AbstractFluentMappingEngine)">
            <summary>
            Creates a new map with the default mapper and metadata
            </summary>
            <typeparam name="TS">The type of the S.</typeparam>
            <typeparam name="TT">The type of the T.</typeparam>
            <param name="engine">The engine.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.MappingExpressionExtensions.IgnoreMemberByName``2(Umbraco.Framework.TypeMapping.IMappingExpression{``0,``1},System.String)">
            <summary>
            Ignores a member to map by its name
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="expression"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.MappingExpressionExtensions.IgnoreMember``3(Umbraco.Framework.TypeMapping.IMappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Shorthand code to ignore a member for maping (Ignore())
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="expression"></param>
            <param name="destinationMember"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.MappingExpressionExtensions.MapMemberFrom``3(Umbraco.Framework.TypeMapping.IMappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Func{``0,``2})">
            <summary>
            Shorthand method to map a member from (MapFrom())
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="expression"></param>
            <param name="destinationMember"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.MappingExpressionExtensions.MapMemberUsing``3(Umbraco.Framework.TypeMapping.IMappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},Umbraco.Framework.TypeMapping.MemberMapper{``0,``2})">
            <summary>
            Shorthand method to map a member using (MapUsing())
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="expression"></param>
            <param name="destinationMember"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.MappingExpressionExtensions.MapMemberUsing``4(Umbraco.Framework.TypeMapping.IMappingExpression{``1,``2},System.Linq.Expressions.Expression{System.Func{``2,``3}})">
            <summary>
            Shorthand method to map a member using (MapUsing())
            </summary>
            <typeparam name="TMemberMapper"></typeparam>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="expression"></param>
            <param name="destinationMember"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.TypeMapDelegatePair">
            <summary>
            Represents a pair of delegates to assist in type mapping; one to map by reference to an existing destination object and one to
            provide a new result by return.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.TypeMapDelegatePair.#ctor(System.Func{System.Object,Umbraco.Framework.TypeMapping.AbstractLookupHelper,Umbraco.Framework.TypeMapping.AbstractMappingEngine,System.Object},System.Action{System.Object,System.Object,Umbraco.Framework.TypeMapping.AbstractLookupHelper,Umbraco.Framework.TypeMapping.AbstractMappingEngine})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.TypeMapping.TypeMapDelegatePair"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.TypeMapDelegatePair.ByReturn">
            <summary>
            Gets or sets the delegate which maps a value by returning an instance of the destination type.
            </summary>
            <value>The by return.</value>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.TypeMapDelegatePair.ByReference">
            <summary>
            Gets or sets the delegate which maps a value onto an instance of the destination type by reference.
            </summary>
            <value>The by reference.</value>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.TypeMapping.MappingEngineCollection">
            <summary>
            Acts as a wrapper for a collection of <see cref="T:Umbraco.Framework.TypeMapping.AbstractMappingEngine"/> based on a key of <see cref="T:Umbraco.Framework.TypeMapping.TypeMapperMetadata"/> in order to 
            select the appropriate mapper for the requested return type.
            </summary>
            <remarks>TODO: Use a shortest path algorithm to allow chaining mappers together</remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingEngineCollection.#ctor(System.Collections.Generic.IEnumerable{System.Lazy{Umbraco.Framework.TypeMapping.AbstractMappingEngine,Umbraco.Framework.TypeMapping.TypeMapperMetadata}})">
            <summary>
              Initializes a new instance of the <see cref="T:Umbraco.Framework.TypeMapping.MappingEngineCollection"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingEngineCollection.Add(System.Lazy{Umbraco.Framework.TypeMapping.AbstractMappingEngine,Umbraco.Framework.TypeMapping.TypeMapperMetadata})">
            <summary>
            Adds the specified binder, calling <see cref="M:Umbraco.Framework.TypeMapping.AbstractMappingEngine.Configure"/> beforehand.
            </summary>
            <param name="binder">The binder.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingEngineCollection.GetMapHandler(System.Type,System.Type,System.Boolean)">
            <summary>
            Returns the engine that handles mapping from the source type to destination type, otherwise if none are found then it returns null.
            </summary>
            <param name="sourceType"></param>
            <param name="destinationType"></param>
            <param name="allowInheritedTypes">true to search mappers that deal with inherited tpes</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingEngineCollection.Map(System.Object,System.Type,System.Type)">
            <summary>
            Maps the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="destinationType">Type of the destination.</param>
            <exception cref="T:System.InvalidOperationException">If no mapper is registered for the <paramref name="sourceType"/> and <paramref name="destinationType"/> mapping pair.</exception>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingEngineCollection.Map(System.Object,System.Object,System.Type,System.Type)">
            <summary>
            Maps the specified source to an existing destination.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="destinationType">Type of the destination.</param>
            <exception cref="T:System.InvalidOperationException">If no mapper is registered for the <paramref name="sourceType"/> and <paramref name="destinationType"/> mapping pair.</exception>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingEngineCollection.Configure">
            <summary>
            Configures this instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingEngineCollection.GetDynamicSupportedMappings">
            <summary>
              Gets supported mappings which can only be declared dynamically at runtime
            </summary>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.MappingEngineCollection.TryGetDestinationType(System.Type,System.Type,System.Type@)">
            <summary>
            Tries to find a destination type given the <paramref name="sourceType"/> and a target type that is equal to or inherits from <paramref name="baseDestinationType"/>.
            </summary>
            <param name="sourceType">The source.</param>
            <param name="baseDestinationType">Base type of the destination.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.MappingEngineCollection.Binders">
            <summary>
            Gets an enumerable collection of the binders contained in this <see cref="T:Umbraco.Framework.TypeMapping.MappingEngineCollection"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.TypeMapperMetadata.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            constructor, sets all properties of this object based on the dictionary values
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.TypeMapperMetadata.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            constructor, sets all properties of this object based parameter values
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <param name="permitTypeInheritance">if set to <c>true</c> [permit type inheritance].</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.TypeMapperMetadata.#ctor(System.Type,System.Type)">
            <summary>
            Constructor sets permitTypeInheritance to false by default
            </summary>
            <param name="fromType"></param>
            <param name="toType"></param>
        </member>
        <member name="M:Umbraco.Framework.TypeMapping.TypeMapperMetadata.#ctor(System.Boolean)">
            <summary>
            constructor, sets all properties of this object based on the dictionary values
            </summary>
            <param name="metadataGeneratedByMapper">if set to <c>true</c> [metadata generated by mapper].</param>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Framework.TypeMapping.TypeMapperMetadata.MetadataGeneratedByMapper">
            <summary>
            Gets or sets a value indicating whether metadata is generated at runtime by the mapper.
            </summary>
            <value><c>true</c> if [metadata generated by mapper]; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Framework.WildcardRegex">
            <summary>
            Represents a wildcard running on the
            <see cref="N:System.Text.RegularExpressions"/> engine.
            </summary>
        </member>
        <member name="M:Umbraco.Framework.WildcardRegex.#ctor(System.String)">
            <summary>
            Initializes a wildcard with the given search pattern.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
        </member>
        <member name="M:Umbraco.Framework.WildcardRegex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a wildcard with the given search pattern and options.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
            <param name="options">A combination of one or more
            <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.</param>
        </member>
        <member name="M:Umbraco.Framework.WildcardRegex.WildcardToRegex(System.String)">
            <summary>
            Converts a wildcard to a regex.
            </summary>
            <param name="pattern">The wildcard pattern to convert.</param>
            <returns>A regex equivalent of the given wildcard.</returns>
        </member>
        <member name="T:Umbraco.Framework.WriteLockDisposable">
            <summary>
            Provides a convenience methodology for implementing locked access to resources. 
            </summary>
            <remarks>
            Intended as an infrastructure class.
            </remarks>
        </member>
        <member name="M:Umbraco.Framework.WriteLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Framework.WriteLockDisposable"/> class.
            </summary>
            <param name="rwLock">The rw lock.</param>
        </member>
    </members>
</doc>
